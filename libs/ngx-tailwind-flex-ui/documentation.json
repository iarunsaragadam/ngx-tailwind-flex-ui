{
    "pipes": [],
    "interfaces": [
        {
            "name": "StackedAlertsArgs",
            "id": "interface-StackedAlertsArgs-2bf227294fee5bbf0e939c8715814248c4c84cd46a2d1ad187790f1e8e8fb5ae47b4591ceafb9a1887cbfb5075bf4e0b81936417f6fade71d2c912c5198ea07a",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj } from '@storybook/angular';\nimport { AlertComponent } from './alert.component';\nimport { applicationConfig } from '@storybook/angular';\nimport { provideAnimations } from '@angular/platform-browser/animations';\n\n// Define the interface for the StackedAlerts story with flat properties\ninterface StackedAlertsArgs {\n  firstMessage: string;\n  firstType: 'success' | 'error' | 'warning' | 'info';\n  firstAction: string | null;\n  firstDismissible: boolean;\n  firstIcon: string | null;\n  firstDuration: number;\n  firstAnimation: 'fade' | 'slide';\n  firstPosition:\n    | 'top-left'\n    | 'top-center'\n    | 'top-right'\n    | 'bottom-left'\n    | 'bottom-center'\n    | 'bottom-right';\n\n  secondMessage: string;\n  secondType: 'success' | 'error' | 'warning' | 'info';\n  secondAction: string | null;\n  secondDismissible: boolean;\n  secondIcon: string | null;\n  secondDuration: number;\n  secondAnimation: 'fade' | 'slide';\n  secondPosition:\n    | 'top-left'\n    | 'top-center'\n    | 'top-right'\n    | 'bottom-left'\n    | 'bottom-center'\n    | 'bottom-right';\n\n  thirdMessage: string;\n  thirdType: 'success' | 'error' | 'warning' | 'info';\n  thirdAction: string | null;\n  thirdDismissible: boolean;\n  thirdIcon: string | null;\n  thirdDuration: number;\n  thirdAnimation: 'fade' | 'slide';\n  thirdPosition:\n    | 'top-left'\n    | 'top-center'\n    | 'top-right'\n    | 'bottom-left'\n    | 'bottom-center'\n    | 'bottom-right';\n}\n\nconst meta: Meta<AlertComponent> = {\n  title: 'Components/Alert',\n  component: AlertComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideAnimations()],\n    }),\n  ],\n  args: {},\n  argTypes: {\n    message: { control: 'text' },\n    type: {\n      control: 'select',\n      options: ['success', 'warning', 'error', 'info'],\n    },\n    duration: { control: 'number' },\n    action: { control: 'text' },\n    dismissible: { control: 'boolean' },\n    position: {\n      control: 'select',\n      options: [\n        'top-left',\n        'top-center',\n        'top-right',\n        'bottom-left',\n        'bottom-center',\n        'bottom-right',\n      ],\n    },\n    icon: {\n      control: 'select',\n      options: [\n        '',\n        'pizza',\n        'mood',\n        'star',\n        'favorite',\n        'thumb_up',\n        'lightbulb',\n        'coffee',\n        'cloud',\n        'music_note',\n        'pets',\n        'rocket',\n        'beach_access',\n      ],\n    },\n    animation: { control: 'select', options: ['fade', 'slide'] },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<AlertComponent>;\n\nexport const BasicSnackBar: Story = {\n  args: {\n    message: 'Disco party!',\n    type: 'info',\n    action: 'Dance',\n    duration: 5000,\n    position: 'bottom-center',\n  },\n};\n\nexport const ConfigurablePosition: Story = {\n  args: {\n    message: 'Pool party!',\n    type: 'info',\n    duration: 5000,\n    position: 'bottom-right',\n  },\n};\n\nexport const DismissibleError: Story = {\n  args: {\n    message: 'Something went wrong',\n    type: 'error',\n    dismissible: true,\n    duration: 0,\n    position: 'top-right',\n  },\n};\n\nexport const SuccessWithAction: Story = {\n  args: {\n    message: 'Data saved successfully',\n    type: 'success',\n    action: 'Undo',\n    duration: 3000,\n    position: 'bottom-center',\n  },\n};\n\nexport const WarningWithCustomIcon: Story = {\n  args: {\n    message: 'Custom icon alert',\n    type: 'warning',\n    icon: 'star',\n    dismissible: true,\n    duration: 5000,\n    position: 'top-center',\n  },\n};\n\nexport const StackedAlerts: StoryObj<AlertComponent & StackedAlertsArgs> = {\n  render: (args: StackedAlertsArgs) => ({\n    props: args,\n    template: `\n      <lib-alert\n        [message]=\"firstMessage\"\n        [type]=\"firstType\"\n        [action]=\"firstAction\"\n        [dismissible]=\"firstDismissible\"\n        [icon]=\"firstIcon\"\n        [duration]=\"firstDuration\"\n        [animation]=\"firstAnimation\"\n        [position]=\"firstPosition\"\n        [bypassDuplicateCheck]=\"true\"\n      ></lib-alert>\n      <lib-alert\n        [message]=\"secondMessage\"\n        [type]=\"secondType\"\n        [action]=\"secondAction\"\n        [dismissible]=\"secondDismissible\"\n        [icon]=\"secondIcon\"\n        [duration]=\"secondDuration\"\n        [animation]=\"secondAnimation\"\n        [position]=\"secondPosition\"\n        [bypassDuplicateCheck]=\"true\"\n      ></lib-alert>\n      <lib-alert\n        [message]=\"thirdMessage\"\n        [type]=\"thirdType\"\n        [action]=\"thirdAction\"\n        [dismissible]=\"thirdDismissible\"\n        [icon]=\"thirdIcon\"\n        [duration]=\"thirdDuration\"\n        [animation]=\"thirdAnimation\"\n        [position]=\"thirdPosition\"\n        [bypassDuplicateCheck]=\"true\"\n      ></lib-alert>\n    `,\n  }),\n  args: {\n    firstMessage: 'First alert',\n    firstType: 'success',\n    firstAction: null,\n    firstDismissible: true,\n    firstIcon: 'star',\n    firstDuration: 50000,\n    firstAnimation: 'slide',\n    firstPosition: 'top-right',\n\n    secondMessage: 'Second alert',\n    secondType: 'warning',\n    secondAction: null,\n    secondDismissible: true,\n    secondIcon: null,\n    secondDuration: 50000,\n    secondAnimation: 'slide',\n    secondPosition: 'top-right',\n\n    thirdMessage: 'Third alert',\n    thirdType: 'error',\n    thirdAction: null,\n    thirdDismissible: true,\n    thirdIcon: null,\n    thirdDuration: 50000,\n    thirdAnimation: 'slide',\n    thirdPosition: 'top-right',\n  } as StackedAlertsArgs,\n  argTypes: {\n    // First Alert Controls\n    firstMessage: {\n      control: { type: 'text', disable: false },\n      name: 'First Alert Message',\n    },\n    firstType: {\n      control: 'select',\n      options: ['success', 'error', 'warning', 'info'],\n      name: 'First Alert Type',\n    },\n    firstAction: {\n      control: { type: 'text', disable: false },\n      name: 'First Alert Action',\n    },\n    firstDismissible: { control: 'boolean', name: 'First Alert Dismissible' },\n    firstIcon: {\n      control: 'select',\n      options: [\n        '',\n        'pizza',\n        'mood',\n        'star',\n        'favorite',\n        'thumb_up',\n        'lightbulb',\n        'coffee',\n        'cloud',\n        'music_note',\n        'pets',\n        'rocket',\n        'beach_access',\n      ],\n      name: 'First Alert Icon',\n    },\n    firstDuration: { control: 'number', name: 'First Alert Duration' },\n    firstAnimation: {\n      control: 'select',\n      options: ['fade', 'slide'],\n      name: 'First Alert Animation',\n    },\n    firstPosition: {\n      control: 'select',\n      options: [\n        'top-left',\n        'top-center',\n        'top-right',\n        'bottom-left',\n        'bottom-center',\n        'bottom-right',\n      ],\n      name: 'First Alert Position',\n    },\n\n    // Second Alert Controls\n    secondMessage: {\n      control: { type: 'text', disable: false },\n      name: 'Second Alert Message',\n    },\n    secondType: {\n      control: 'select',\n      options: ['success', 'error', 'warning', 'info'],\n      name: 'Second Alert Type',\n    },\n    secondAction: {\n      control: { type: 'text', disable: false },\n      name: 'Second Alert Action',\n    },\n    secondDismissible: { control: 'boolean', name: 'Second Alert Dismissible' },\n    secondIcon: {\n      control: 'select',\n      options: [\n        '',\n        'pizza',\n        'mood',\n        'star',\n        'favorite',\n        'thumb_up',\n        'lightbulb',\n        'coffee',\n        'cloud',\n        'music_note',\n        'pets',\n        'rocket',\n        'beach_access',\n      ],\n      name: 'Second Alert Icon',\n    },\n    secondDuration: { control: 'number', name: 'Second Alert Duration' },\n    secondAnimation: {\n      control: 'select',\n      options: ['fade', 'slide'],\n      name: 'Second Alert Animation',\n    },\n    secondPosition: {\n      control: 'select',\n      options: [\n        'top-left',\n        'top-center',\n        'top-right',\n        'bottom-left',\n        'bottom-center',\n        'bottom-right',\n      ],\n      name: 'Second Alert Position',\n    },\n\n    // Third Alert Controls\n    thirdMessage: {\n      control: { type: 'text', disable: false },\n      name: 'Third Alert Message',\n    },\n    thirdType: {\n      control: 'select',\n      options: ['success', 'error', 'warning', 'info'],\n      name: 'Third Alert Type',\n    },\n    thirdAction: {\n      control: { type: 'text', disable: false },\n      name: 'Third Alert Action',\n    },\n    thirdDismissible: { control: 'boolean', name: 'Third Alert Dismissible' },\n    thirdIcon: {\n      control: 'select',\n      options: [\n        '',\n        'pizza',\n        'mood',\n        'star',\n        'favorite',\n        'thumb_up',\n        'lightbulb',\n        'coffee',\n        'cloud',\n        'music_note',\n        'pets',\n        'rocket',\n        'beach_access',\n      ],\n      name: 'Third Alert Icon',\n    },\n    thirdDuration: { control: 'number', name: 'Third Alert Duration' },\n    thirdAnimation: {\n      control: 'select',\n      options: ['fade', 'slide'],\n      name: 'Third Alert Animation',\n    },\n    thirdPosition: {\n      control: 'select',\n      options: [\n        'top-left',\n        'top-center',\n        'top-right',\n        'bottom-left',\n        'bottom-center',\n        'bottom-right',\n      ],\n      name: 'Third Alert Position',\n    },\n\n    // Remove inherited fields that are not used in this story\n    message: { table: { disable: true } },\n    type: { table: { disable: true } },\n    duration: { table: { disable: true } },\n    action: { table: { disable: true } },\n    dismissible: { table: { disable: true } },\n    position: { table: { disable: true } },\n    icon: { table: { disable: true } },\n    animation: { table: { disable: true } },\n  },\n};\n",
            "properties": [
                {
                    "name": "firstAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "firstAnimation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"fade\" | \"slide\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "firstDismissible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "firstDuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "firstIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "firstMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "firstPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "firstType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "secondAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "secondAnimation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"fade\" | \"slide\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "secondDismissible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "secondDuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "secondIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "secondMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "secondPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "secondType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "thirdAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "thirdAnimation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"fade\" | \"slide\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "thirdDismissible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "thirdDuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "thirdIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "thirdMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "thirdPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "thirdType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-f8efc4b250e8195d469ebf0fa661fd8dc1d2e8f168b72b0f005038f0e49c98b308dc583c2ce76b000724af704ee7b239a73f68bd096417d01e34c471c6e31ebf",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-alert",
            "styleUrls": [
                "./alert.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "action",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "actionTemplate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 145,
                    "type": "TemplateRef<> | null",
                    "decorators": []
                },
                {
                    "name": "animation",
                    "defaultValue": "'fade'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 144,
                    "type": "\"fade\" | \"slide\"",
                    "decorators": []
                },
                {
                    "name": "bypassDuplicateCheck",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 146,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 136,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "dismissible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "duration",
                    "defaultValue": "5000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 125,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "iconColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 127,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionClicked",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 148,
                    "type": "EventEmitter"
                },
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 149,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_customClass",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_iconColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_position",
                    "defaultValue": "'top-right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_type",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "activeAlerts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AlertComponent[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123,
                        126
                    ]
                },
                {
                    "name": "isVisible",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 151
                },
                {
                    "name": "offset",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "timer",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReturnType<> | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 153,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAnimationParams",
                    "args": [],
                    "optional": false,
                    "returnType": "{ startTransform: string; endTransform: string; }",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pauseTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resumeTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updatePositions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 307,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  AfterViewInit,\n  OnDestroy,\n  TemplateRef,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { animate, style, transition, trigger } from '@angular/animations';\n\n@Component({\n  selector: 'lib-alert',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('fadeInOut', [\n      transition(':enter', [\n        style({ opacity: 0 }),\n        animate('300ms ease-in', style({ opacity: 1 })),\n      ]),\n      transition(':leave', [animate('300ms ease-out', style({ opacity: 0 }))]),\n    ]),\n    trigger('slideInOut', [\n      transition(\n        ':enter',\n        [\n          style({ transform: '{{startTransform}}' }),\n          animate('300ms ease-in', style({ transform: '{{endTransform}}' })),\n        ],\n        {\n          params: {\n            startTransform: 'translateY(-100%)',\n            endTransform: 'translateY(0%)',\n          },\n        }\n      ),\n      transition(\n        ':leave',\n        [animate('300ms ease-out', style({ transform: '{{startTransform}}' }))],\n        {\n          params: {\n            startTransform: 'translateY(-100%)',\n            endTransform: 'translateY(0%)',\n          },\n        }\n      ),\n    ]),\n  ],\n})\nexport class AlertComponent implements AfterViewInit, OnDestroy {\n  private static activeAlerts: AlertComponent[] = [];\n  private _type: 'success' | 'error' | 'warning' | 'info' = 'info';\n  private _position:\n    | 'top-left'\n    | 'top-center'\n    | 'top-right'\n    | 'bottom-left'\n    | 'bottom-center'\n    | 'bottom-right' = 'top-right';\n  private _iconColor: string | null = null;\n  private _customClass: string | null = null;\n\n  @Input() message = '';\n  @Input()\n  set type(value: 'success' | 'error' | 'warning' | 'info') {\n    if (!['success', 'error', 'warning', 'info'].includes(value)) {\n      throw new Error(\n        `Invalid type: ${value}. Must be one of 'success', 'error', 'warning', 'info'.`\n      );\n    }\n    this._type = value;\n    this.cdr.markForCheck();\n  }\n  get type(): 'success' | 'error' | 'warning' | 'info' {\n    return this._type;\n  }\n\n  @Input() duration = 5000;\n  @Input() action: string | null = null;\n  @Input() dismissible = false;\n  @Input()\n  set position(\n    value:\n      | 'top-left'\n      | 'top-center'\n      | 'top-right'\n      | 'bottom-left'\n      | 'bottom-center'\n      | 'bottom-right'\n  ) {\n    if (\n      ![\n        'top-left',\n        'top-center',\n        'top-right',\n        'bottom-left',\n        'bottom-center',\n        'bottom-right',\n      ].includes(value)\n    ) {\n      throw new Error(\n        `Invalid position: ${value}. Must be one of 'top-left', 'top-center', 'top-right', 'bottom-left', 'bottom-center', 'bottom-right'.`\n      );\n    }\n    this._position = value;\n    this.cdr.markForCheck();\n  }\n  get position():\n    | 'top-left'\n    | 'top-center'\n    | 'top-right'\n    | 'bottom-left'\n    | 'bottom-center'\n    | 'bottom-right' {\n    return this._position;\n  }\n\n  @Input() icon: string | null = null;\n  @Input()\n  set iconColor(value: string | null) {\n    this._iconColor = value;\n    this.cdr.detectChanges(); // Force change detection\n  }\n  get iconColor(): string | null {\n    return this._iconColor;\n  }\n\n  @Input()\n  set customClass(value: string | null) {\n    this._customClass = value;\n    this.cdr.detectChanges(); // Force change detection\n  }\n  get customClass(): string | null {\n    return this._customClass;\n  }\n\n  @Input() animation: 'fade' | 'slide' = 'fade';\n  @Input() actionTemplate: TemplateRef<unknown> | null = null;\n  @Input() bypassDuplicateCheck = false;\n\n  @Output() actionClicked = new EventEmitter<void>();\n  @Output() closed = new EventEmitter<void>();\n\n  isVisible = true;\n  offset = 0;\n  private timer: ReturnType<typeof setTimeout> | null = null;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    if (!this.bypassDuplicateCheck) {\n      const duplicate = AlertComponent.activeAlerts.find(\n        (alert) =>\n          alert.message === this.message && alert.position === this.position\n      );\n      if (duplicate) {\n        this.isVisible = false;\n        this.cdr.markForCheck();\n        return;\n      }\n    }\n\n    AlertComponent.activeAlerts.push(this);\n    this.updatePositions();\n    if (this.duration > 0) {\n      this.startTimer();\n    }\n  }\n\n  ngOnDestroy(): void {\n    const index = AlertComponent.activeAlerts.indexOf(this);\n    if (index !== -1) {\n      AlertComponent.activeAlerts.splice(index, 1);\n      this.updatePositions();\n    }\n    this.clearTimer();\n  }\n\n  getClasses(): string[] {\n    const classes: string[] = [];\n\n    switch (this.type) {\n      case 'success':\n        classes.push(\n          'bg-green-100 border-green-500 text-green-800 dark:bg-green-900 dark:border-green-600 dark:text-green-200'\n        );\n        break;\n      case 'error':\n        classes.push(\n          'bg-red-100 border-red-500 text-red-800 dark:bg-red-900 dark:border-red-600 dark:text-red-200'\n        );\n        break;\n      case 'warning':\n        classes.push(\n          'bg-yellow-100 border-yellow-500 text-yellow-800 dark:bg-yellow-900 dark:border-yellow-600 dark:text-yellow-200'\n        );\n        break;\n      case 'info':\n        classes.push(\n          'bg-blue-100 border-blue-500 text-blue-800 dark:bg-blue-900 dark:border-blue-600 dark:text-blue-200'\n        );\n        break;\n    }\n\n    if (this.position === 'top-left' || this.position === 'bottom-left') {\n      classes.push('left-4');\n    } else if (\n      this.position === 'top-center' ||\n      this.position === 'bottom-center'\n    ) {\n      classes.push('left-1/2', '-translate-x-1/2');\n    } else if (\n      this.position === 'top-right' ||\n      this.position === 'bottom-right'\n    ) {\n      classes.push('right-4');\n    }\n\n    if (this.customClass) {\n      classes.push(this.customClass);\n    }\n\n    return classes;\n  }\n\n  getIcon(): string {\n    if (this.icon) {\n      return this.icon;\n    }\n    switch (this.type) {\n      case 'success':\n        return 'check_circle';\n      case 'error':\n        return 'error';\n      case 'warning':\n        return 'warning';\n      case 'info':\n        return 'info';\n      default:\n        return 'info';\n    }\n  }\n\n  getAnimationParams() {\n    const isTop = this.position.includes('top');\n    const isLeft = this.position.includes('left');\n    const isRight = this.position.includes('right');\n    return {\n      startTransform: isTop\n        ? 'translateY(-100%)'\n        : isLeft\n        ? 'translateX(-100%)'\n        : isRight\n        ? 'translateX(100%)'\n        : 'translateY(100%)',\n      endTransform: 'translateY(0%) translateX(0%)',\n    };\n  }\n\n  get ariaLabel(): string {\n    return `${this.type} alert: ${this.message}${\n      this.action ? ', with action: ' + this.action : ''\n    }`;\n  }\n\n  onAction(): void {\n    this.actionClicked.emit();\n  }\n\n  close(): void {\n    this.isVisible = false;\n    this.closed.emit();\n    this.cdr.markForCheck();\n  }\n\n  pauseTimer(): void {\n    this.clearTimer();\n  }\n\n  resumeTimer(): void {\n    if (this.duration > 0) {\n      this.startTimer();\n    }\n  }\n\n  private startTimer(): void {\n    this.clearTimer();\n    this.timer = setTimeout(() => {\n      this.close();\n    }, this.duration);\n  }\n\n  private clearTimer(): void {\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n  }\n\n  private updatePositions(): void {\n    const alertsAtPosition = AlertComponent.activeAlerts.filter(\n      (alert) => alert.position === this.position && alert.isVisible\n    );\n    let offset = 0;\n    for (const alert of alertsAtPosition) {\n      alert.offset = offset;\n      offset += 60; // Adjust based on alert height + margin\n      alert.cdr.markForCheck();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import url('https://fonts.googleapis.com/icon?family=Material+Icons');\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-size: 18px; /* Matches text-lg in Tailwind */\n  font-weight: normal;\n  font-style: normal;\n  display: inline-block;\n  line-height: 1;\n  text-transform: none;\n  letter-spacing: normal;\n  word-wrap: normal;\n  white-space: nowrap;\n  direction: ltr;\n}\n\n.message {\n  max-width: 300px; /* Adjust as needed */\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.material-icons--custom-color {\n  color: inherit !important;\n}\n",
                    "styleUrl": "./alert.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 153,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "type": {
                    "name": "type",
                    "setSignature": {
                        "name": "type",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 72,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "\"success\" | \"error\" | \"warning\" | \"info\"",
                        "line": 81
                    }
                },
                "position": {
                    "name": "position",
                    "setSignature": {
                        "name": "position",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 89,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "position",
                        "type": "",
                        "returnType": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                        "line": 115
                    }
                },
                "iconColor": {
                    "name": "iconColor",
                    "setSignature": {
                        "name": "iconColor",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 127,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "iconColor",
                        "type": "",
                        "returnType": "string | null",
                        "line": 131
                    }
                },
                "customClass": {
                    "name": "customClass",
                    "setSignature": {
                        "name": "customClass",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 136,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "customClass",
                        "type": "",
                        "returnType": "string | null",
                        "line": 140
                    }
                },
                "ariaLabel": {
                    "name": "ariaLabel",
                    "getSignature": {
                        "name": "ariaLabel",
                        "type": "string",
                        "returnType": "string",
                        "line": 267
                    }
                }
            },
            "templateData": "<div\n  *ngIf=\"isVisible\"\n  class=\"alert fixed z-50 p-4 rounded-lg shadow-lg flex justify-between items-center max-w-md mx-auto bg-gray-100 border border-gray-300 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-200\"\n  [ngClass]=\"getClasses()\"\n  [style.top]=\"position.includes('top') ? 4 + offset + 'px' : null\"\n  [style.bottom]=\"position.includes('bottom') ? 4 + offset + 'px' : null\"\n  role=\"alert\"\n  aria-live=\"polite\"\n  [attr.aria-label]=\"ariaLabel\"\n  [@fadeInOut]=\"animation === 'fade' ? { value: '' } : null\"\n  [@slideInOut]=\"\n    animation === 'slide' ? { value: '', params: getAnimationParams() } : null\n  \"\n  (mouseenter)=\"pauseTimer()\"\n  (mouseleave)=\"resumeTimer()\"\n>\n  <div class=\"flex items-center space-x-2\">\n    <span\n      class=\"material-icons text-lg\"\n      [ngClass]=\"\n        iconColor\n          ? 'material-icons--custom-color ' + iconColor\n          : type === 'success'\n          ? 'text-green-600 dark:text-green-400'\n          : type === 'error'\n          ? 'text-red-600 dark:text-red-400'\n          : type === 'warning'\n          ? 'text-yellow-600 dark:text-yellow-400'\n          : 'text-blue-600 dark:text-blue-400'\n      \"\n    >\n      {{ getIcon() }}\n    </span>\n    <span class=\"message\">{{ message }}</span>\n  </div>\n  <div class=\"flex space-x-2\">\n    <ng-container *ngIf=\"action\">\n      <ng-container\n        *ngTemplateOutlet=\"actionTemplate || defaultActionTemplate\"\n      ></ng-container>\n    </ng-container>\n    <button\n      *ngIf=\"dismissible\"\n      (click)=\"close()\"\n      (keydown.enter)=\"close()\"\n      (keydown.space)=\"close()\"\n      class=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 focus:outline-none text-xl\"\n      aria-label=\"Close alert\"\n      tabindex=\"0\"\n    >\n      ✕\n    </button>\n  </div>\n</div>\n\n<ng-template #defaultActionTemplate>\n  <button\n    (click)=\"onAction()\"\n    (keydown.enter)=\"onAction()\"\n    (keydown.space)=\"onAction()\"\n    class=\"text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 focus:outline-none underline\"\n    [attr.aria-label]=\"action + ' action'\"\n    tabindex=\"0\"\n  >\n    {{ action }}\n  </button>\n</ng-template>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-7b549b2939b9a34abd922e3a0255997fdcdc44e13e0d3149f6f081fd94e8328dfcef16d4b504efc25d22156e814a32fd37682ce25460fb63fbe9f89259f6c17c",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"primary\" | \"accent\" | \"outline\" | \"text\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, HostBinding } from '@angular/core';\n\n@Component({\n  selector: 'lib-button',\n  standalone: true,\n  templateUrl: './button.component.html',\n  styles: [], // No inline styles; Tailwind handles it\n})\nexport class ButtonComponent {\n  @Input() variant: 'primary' | 'accent' | 'outline' | 'text' = 'primary';\n  @Input() disabled = false;\n  @Input() class = ''; // Allow users to pass custom Tailwind classes\n\n  @HostBinding('class') get hostClasses() {\n    const baseClasses =\n      'inline-flex items-center justify-center px-4 py-2 rounded-md font-medium transition-colors duration-200';\n    const variantClasses = {\n      primary:\n        'bg-blue-600 text-white hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',\n      accent:\n        'bg-purple-600 text-white hover:bg-purple-700 focus:ring-2 focus:ring-purple-500 focus:ring-offset-2',\n      outline:\n        'border border-gray-300 text-gray-700 hover:bg-gray-100 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2',\n      text: 'text-gray-700 hover:bg-gray-100 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2',\n    };\n    const disabledClasses = this.disabled\n      ? 'opacity-50 cursor-not-allowed'\n      : '';\n\n    return `${baseClasses} ${variantClasses[this.variant]} ${disabledClasses} ${\n      this.class\n    }`.trim();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "hostClasses": {
                    "name": "hostClasses",
                    "getSignature": {
                        "name": "hostClasses",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                }
            },
            "templateData": "<button [disabled]=\"disabled\">\n  <ng-content></ng-content>\n</button>\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-f4ffddc67d4dc8cdcc909de572d3660df47682439e6a9f4405942573613c1afc2dac2183ba5b0f69bbb0568ec3eb59ac6e3bfa8c56f5eecf072b8b573f060f08",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-icon",
            "styleUrls": [
                "./icon.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'text-gray-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'home'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "\"sm\" | \"md\" | \"lg\" | \"xl\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'lib-icon',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.css'],\n})\nexport class IconComponent {\n  @Input() name = 'home';\n  @Input() size: 'sm' | 'md' | 'lg' | 'xl' = 'md';\n  @Input() color = 'text-gray-500';\n\n  get sizePx(): number {\n    const sizeMap: Record<string, number> = {\n      sm: 16,\n      md: 24,  // Default Material Icon size\n      lg: 32,\n      xl: 48,\n    };\n    return sizeMap[this.size] || sizeMap['md'];\n  }\n\n  get colorClass(): string {\n    return this.color;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".material-icons {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    vertical-align: middle;\n}",
                    "styleUrl": "./icon.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "sizePx": {
                    "name": "sizePx",
                    "getSignature": {
                        "name": "sizePx",
                        "type": "number",
                        "returnType": "number",
                        "line": 16
                    }
                },
                "colorClass": {
                    "name": "colorClass",
                    "getSignature": {
                        "name": "colorClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 26
                    }
                }
            },
            "templateData": "<span \n  class=\"material-icons\"\n  [ngClass]=\"colorClass\"\n  [style.font-size.px]=\"sizePx\">\n  {{ name }}\n</span>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-1fdaf3e6353e432502bca061ee25725ff03f67508fe5f778842c1764fb50a46a9239c0863872b3fced46d5ee101297d6fa9fd52da80c0e003473a6e557e178a1",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "\"sm\" | \"md\" | \"lg\"",
                    "decorators": []
                },
                {
                    "name": "state",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "\"default\" | \"error\" | \"success\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string | number | null",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'outline'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "\"outline\" | \"filled\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'lib-input',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './input.component.html',\n  styles: [], // Tailwind only\n})\nexport class InputComponent {\n  @Input() variant: 'outline' | 'filled' = 'outline';\n  @Input() size: 'sm' | 'md' | 'lg' = 'md';\n  @Input() state: 'default' | 'error' | 'success' = 'default';\n  @Input() class = '';\n  @Input() type = 'text';\n  @Input() placeholder = '';\n  @Input() disabled = false;\n  @Input() value: string | number | null = null;\n\n  @HostBinding('class') get hostClasses() {\n    const base = 'block w-full focus:outline-none transition-colors';\n    const variantMap = {\n      outline: 'bg-white border border-gray-300 focus:border-blue-500',\n      filled: 'bg-gray-100 border border-transparent focus:border-blue-500',\n    };\n    const sizeMap = {\n      sm: 'px-2 py-1 text-sm rounded',\n      md: 'px-3 py-2 text-base rounded-md',\n      lg: 'px-4 py-3 text-lg rounded-lg',\n    };\n    const stateMap = {\n      default: '',\n      error: 'border-red-500 focus:border-red-600',\n      success: 'border-green-500 focus:border-green-600',\n    };\n    const disabled = this.disabled ? 'opacity-50 cursor-not-allowed' : '';\n    return `${base} ${variantMap[this.variant]} ${sizeMap[this.size]} ${stateMap[this.state]} ${disabled} ${this.class}`.trim();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "hostClasses": {
                    "name": "hostClasses",
                    "getSignature": {
                        "name": "hostClasses",
                        "type": "",
                        "returnType": "",
                        "line": 21
                    }
                }
            },
            "templateData": "<input\n  [type]=\"type\"\n  [placeholder]=\"placeholder\"\n  [disabled]=\"disabled\"\n  [ngModel]=\"value\"\n  class=\"w-full bg-transparent\"\n/>\n"
        },
        {
            "name": "LoadingSpinnerComponent",
            "id": "component-LoadingSpinnerComponent-10509c463c4902342a644ec0f29cb262b6513479ebdd929cfacec37856de1d1ef4beb814f63ac3f69346f425e71fbf1fbe354f8313e1b711ac3f038fe8fd695d",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-loading-spinner",
            "styleUrls": [
                "./loadingSpinner.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./loadingSpinner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'#3b82f6'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "\"determinate\" | \"indeterminate\"",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "thickness",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'lib-loading-spinner',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './loadingSpinner.component.html',\n  styleUrls: ['./loadingSpinner.component.css'],\n})\nexport class LoadingSpinnerComponent {\n  @Input() mode: 'determinate' | 'indeterminate' = 'indeterminate'; // Loading state\n  @Input() value = 0; // Progress value (0-100) for determinate mode\n  @Input() size = 40; // Diameter in pixels\n  @Input() thickness = 4; // Stroke width in pixels\n  @Input() color = '#3b82f6'; // Default Tailwind blue-500\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n\nsvg {\n  display: block;\n}\n",
                    "styleUrl": "./loadingSpinner.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div\n  class=\"relative inline-block\"\n  [style.width.px]=\"size\"\n  [style.height.px]=\"size\"\n  role=\"progressbar\"\n  [attr.aria-valuenow]=\"mode === 'determinate' ? value : null\"\n  [attr.aria-valuemin]=\"0\"\n  [attr.aria-valuemax]=\"100\"\n  [attr.aria-label]=\"mode === 'determinate' ? 'Loading progress' : 'Loading'\"\n>\n  <!-- Indeterminate Spinner -->\n  <svg\n    *ngIf=\"mode === 'indeterminate'\"\n    class=\"animate-spin\"\n    [style.width.px]=\"size\"\n    [style.height.px]=\"size\"\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle\n      class=\"opacity-25\"\n      cx=\"50\"\n      cy=\"50\"\n      r=\"40\"\n      [style.stroke]=\"color\"\n      [style.stroke-width]=\"thickness\"\n      fill=\"none\"\n    />\n    <circle\n      cx=\"50\"\n      cy=\"50\"\n      r=\"40\"\n      [style.stroke]=\"color\"\n      [style.stroke-width]=\"thickness\"\n      fill=\"none\"\n      stroke-linecap=\"round\"\n      stroke-dasharray=\"251.2\"\n      stroke-dashoffset=\"62.8\"\n    />\n  </svg>\n\n  <!-- Determinate Spinner -->\n  <svg\n    *ngIf=\"mode === 'determinate'\"\n    [style.width.px]=\"size\"\n    [style.height.px]=\"size\"\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle\n      class=\"opacity-25\"\n      cx=\"50\"\n      cy=\"50\"\n      r=\"40\"\n      [style.stroke]=\"color\"\n      [style.stroke-width]=\"thickness\"\n      fill=\"none\"\n    />\n    <circle\n      class=\"transition-all duration-300 ease-in-out\"\n      cx=\"50\"\n      cy=\"50\"\n      r=\"40\"\n      [style.stroke]=\"color\"\n      [style.stroke-width]=\"thickness\"\n      fill=\"none\"\n      stroke-linecap=\"round\"\n      [style.stroke-dasharray]=\"251.2\"\n      [style.stroke-dashoffset]=\"251.2 - 251.2 * (value / 100)\"\n    />\n  </svg>\n</div>\n"
        },
        {
            "name": "PaginatorComponent",
            "id": "component-PaginatorComponent-1fb3bb93af7f13625b403ab0e2e05642b5aec29b96c7e71e6542a29cfbd4095e3b2ed2f1be3be82e3ab53ba30d53b56fd48871308a8c9c6149074034d7330bd0",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/paginator/paginator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-paginator",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./paginator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "length",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageSize",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                },
                {
                    "name": "pageSizeChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "pageSizeOptions",
                    "defaultValue": "[10, 20, 50, 100]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "newIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changePageSize",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'lib-paginator',\n  imports: [CommonModule],\n  templateUrl: './paginator.component.html',\n})\nexport class PaginatorComponent {\n  @Input() length = 100; // Total items\n  @Input() pageSize = 10; // Items per page\n  @Input() pageIndex = 0; // Current page\n  @Output() pageChange = new EventEmitter<number>();\n  @Output() pageSizeChange = new EventEmitter<number>();\n\n  pageSizeOptions = [10, 20, 50, 100];\n\n  @HostBinding('class') get hostClasses() {\n    return 'flex justify-between items-center p-4 bg-gray-100 rounded-lg shadow-sm w-full';\n  }\n\n  get totalPages(): number {\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n  get isFirstPage(): boolean {\n    return this.pageIndex === 0;\n  }\n\n  get isLastPage(): boolean {\n    return this.pageIndex === this.totalPages - 1;\n  }\n\n  get startItem(): number {\n    return this.pageIndex * this.pageSize + 1;\n  }\n\n  get endItem(): number {\n    return Math.min((this.pageIndex + 1) * this.pageSize, this.length);\n  }\n\n  changePage(newIndex: number) {\n    if (newIndex >= 0 && newIndex < this.totalPages) {\n      this.pageIndex = newIndex;\n      this.pageChange.emit(this.pageIndex);\n    }\n  }\n\n  changePageSize(event: Event) {\n    const newSize = Number((event.target as HTMLSelectElement).value);\n    this.pageSize = newSize;\n    this.pageIndex = 0; // Reset to first page\n    this.pageSizeChange.emit(this.pageSize);\n    this.pageChange.emit(this.pageIndex);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "hostClasses": {
                    "name": "hostClasses",
                    "getSignature": {
                        "name": "hostClasses",
                        "type": "",
                        "returnType": "",
                        "line": 18
                    }
                },
                "totalPages": {
                    "name": "totalPages",
                    "getSignature": {
                        "name": "totalPages",
                        "type": "number",
                        "returnType": "number",
                        "line": 22
                    }
                },
                "isFirstPage": {
                    "name": "isFirstPage",
                    "getSignature": {
                        "name": "isFirstPage",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 26
                    }
                },
                "isLastPage": {
                    "name": "isLastPage",
                    "getSignature": {
                        "name": "isLastPage",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 30
                    }
                },
                "startItem": {
                    "name": "startItem",
                    "getSignature": {
                        "name": "startItem",
                        "type": "number",
                        "returnType": "number",
                        "line": 34
                    }
                },
                "endItem": {
                    "name": "endItem",
                    "getSignature": {
                        "name": "endItem",
                        "type": "number",
                        "returnType": "number",
                        "line": 38
                    }
                }
            },
            "templateData": "<!-- Page Size Selector -->\n<div class=\"flex items-center space-x-2\">\n  <label for=\"pageSizeSelect\" class=\"text-gray-600 text-sm\">Items per page:</label>\n  <select \n    id=\"pageSizeSelect\"\n    [value]=\"pageSize\"\n    (change)=\"changePageSize($event)\"\n    class=\"border border-gray-300 rounded-md px-2 py-2 bg-white text-gray-700\">\n    <option *ngFor=\"let size of pageSizeOptions\" [value]=\"size\">{{ size }}</option>\n  </select>\n</div>\n\n<!-- Page Information -->\n<span class=\"text-gray-500 text-sm\">\n  {{ startItem }} – {{ endItem }} of {{ length }}\n</span>\n\n<!-- Navigation Controls -->\n<button \n  [disabled]=\"isFirstPage\"\n  (click)=\"changePage(pageIndex - 1)\"\n  class=\"p-2 text-gray-500 hover:text-black disabled:opacity-50\">\n  ❮\n</button>\n\n<button \n  [disabled]=\"isLastPage\"\n  (click)=\"changePage(pageIndex + 1)\"\n  class=\"p-2 text-gray-500 hover:text-black disabled:opacity-50\">\n  ❯\n</button>\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-7d8a8dfd44a8cfebe1879bdfbcc8957089d0d26cfee79d6f7748440be200c61047da266a2203c71c427ad422483a890436b6d3cb771694e1537c50fa2c6d8bec",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-progress-bar",
            "styleUrls": [
                "./progress-bar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "bufferProgress",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBuffer progress (for buffer variant, 0-100)",
                    "description": "<p>Buffer progress (for buffer variant, 0-100)</p>\n",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nColor options",
                    "description": "<p>Color options</p>\n",
                    "line": 21,
                    "type": "\"primary\" | \"secondary\" | \"success\" | \"error\"",
                    "decorators": []
                },
                {
                    "name": "progress",
                    "defaultValue": "80",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nPrimary progress percentage (0-100)",
                    "description": "<p>Primary progress percentage (0-100)</p>\n",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'determinate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTypes: 'determinate' | 'indeterminate' | 'buffer' | 'query'",
                    "description": "<p>Types: &#39;determinate&#39; | &#39;indeterminate&#39; | &#39;buffer&#39; | &#39;query&#39;</p>\n",
                    "line": 12,
                    "type": "\"determinate\" | \"indeterminate\" | \"buffer\" | \"query\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colorMap",
                    "defaultValue": "{\n    primary: 'bg-blue-500', // Default\n    secondary: 'bg-yellow-500',\n    success: 'bg-green-500',\n    error: 'bg-red-500', // Warning\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMap color variants to Tailwind CSS classes",
                    "description": "<p>Map color variants to Tailwind CSS classes</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, HostBinding, Input } from '@angular/core';\n\n@Component({\n  selector: 'lib-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.css'],\n  imports: [CommonModule],\n})\nexport class ProgressBarComponent {\n  /** Types: 'determinate' | 'indeterminate' | 'buffer' | 'query' */\n  @Input() variant: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Primary progress percentage (0-100) */\n  @Input() progress = 80;\n\n  /** Buffer progress (for buffer variant, 0-100) */\n  @Input() bufferProgress = 100;\n\n  /** Color options */\n  @Input() color: 'primary' | 'secondary' | 'success' | 'error' = 'primary';\n\n  @Input() class = ''; // Allow users to pass custom Tailwind classes\n\n  \n\n  private readonly colorMap = {\n    primary: 'bg-blue-500', // Default\n    secondary: 'bg-yellow-500',\n    success: 'bg-green-500',\n    error: 'bg-red-500', // Warning\n  };\n\n  /** Map color variants to Tailwind CSS classes */\n  @HostBinding('class')\n  get progressBarClass(): string {\n    return this.colorMap[this.color] || 'bg-blue-500';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@keyframes indeterminate {\n    0% {\n      left: -100%;\n    }\n    100% {\n      left: 100%;\n    }\n  }\n  \n  @keyframes query {\n    0% {\n      right: -100%;\n    }\n    100% {\n      right: 100%;\n    }\n  }\n\n  @keyframes bufferWave {\n    0% {\n      left: -100%;\n      width: 40%;\n    }\n    50% {\n      left: 50%;\n      width: 60%;\n    }\n    100% {\n      left: 100%;\n      width: 40%;\n    }\n  }\n  \n  .animate-indeterminate {\n    position: absolute;\n    left: -100%;\n    width: 40%;\n    animation: indeterminate 1.5s infinite linear;\n  }\n  \n  .animate-query {\n    position: absolute;\n    right: -100%;\n    width: 40%;\n    animation: query 1.5s infinite linear;\n  }\n\n  .buffer-wave {\n    position: absolute;\n    left: -100%;\n    height: 100%;\n    width: 40%;\n    background: linear-gradient(to right, rgba(0, 0, 0, 0.1), rgba(255, 255, 255, 0.3));\n    animation: bufferWave 2s infinite ease-in-out;\n  }\n\n  \n  ",
                    "styleUrl": "./progress-bar.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "progressBarClass": {
                    "name": "progressBarClass",
                    "getSignature": {
                        "name": "progressBarClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 36,
                        "rawdescription": "\nMap color variants to Tailwind CSS classes",
                        "description": "<p>Map color variants to Tailwind CSS classes</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"w-full bg-gray-200 rounded-full h-4 overflow-hidden relative\">\n\n  <!-- Determinate & Buffer Primary Progress -->\n  <div\n    *ngIf=\"variant === 'determinate' || variant === 'buffer'\"\n    class=\"h-full transition-all duration-300\"\n    [ngClass]=\"progressBarClass\"\n    [style.width.%]=\"progress\"\n    role=\"progressbar\"\n    [attr.aria-valuenow]=\"progress\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n  ></div>\n\n  <!-- Indeterminate Animation -->\n  <div\n    *ngIf=\"variant === 'indeterminate'\"\n    class=\"absolute top-0 left-0 h-full w-full overflow-hidden\"\n  >\n    <div\n      class=\"h-full w-1/3 animate-indeterminate\"\n      [ngClass]=\"progressBarClass\"\n    ></div>\n  </div>\n\n  <!-- Query Mode (Reversed Indeterminate) -->\n  <div\n    *ngIf=\"variant === 'query'\"\n    class=\"absolute top-0 left-0 h-full w-full overflow-hidden\"\n  >\n    <div\n      class=\"h-full w-1/3 animate-query\"\n      [ngClass]=\"progressBarClass\"\n    ></div>\n  </div>\n\n  <!-- Buffer Secondary Progress -->\n  <!-- Buffer Secondary Progress Background -->\n<div\n*ngIf=\"variant === 'buffer'\"\nclass=\"absolute top-0 left-0 h-full bg-gray-300 opacity-50\"\n[style.width.%]=\"bufferProgress\"\n></div>\n\n<!-- Buffer Animation Overlay -->\n<div\n*ngIf=\"variant === 'buffer'\"\nclass=\"absolute top-0 left-0 h-full w-full overflow-hidden\"\n>\n<div class=\"buffer-wave\"></div>\n</div>\n\n\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "Accent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'accent',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Accent Button</lib-button>`,\n  }),\n}"
            },
            {
                "name": "BasicSnackBar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    message: 'Disco party!',\n    type: 'info',\n    action: 'Dance',\n    duration: 5000,\n    position: 'bottom-center',\n  },\n}"
            },
            {
                "name": "Colored",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    color: '#ef4444', // Tailwind red-500\n  },\n}"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/.storybook/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StorybookConfig",
                "defaultValue": "{\n  stories: ['../**/*.@(mdx|stories.@(js|jsx|ts|tsx))'],\n  addons: ['@storybook/addon-essentials', '@storybook/addon-interactions'],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n  docs: {\n    autodocs: true,\n    defaultName: 'Docs',\n  },\n}"
            },
            {
                "name": "ConfigurablePosition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    message: 'Pool party!',\n    type: 'info',\n    duration: 5000,\n    position: 'bottom-right',\n  },\n}"
            },
            {
                "name": "CustomStyled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'primary',\n    class: 'text-lg px-6 py-3 bg-green-500 hover:bg-green-600',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [class]=\"class\">Custom Styled Button</lib-button>`,\n  }),\n}"
            },
            {
                "name": "CustomStyled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    progress: 60,\n    color: 'primary',\n    variant: 'determinate',\n    class: 'h-6 rounded-lg',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [color]=\"color\" [variant]=\"variant\" [class]=\"class\"></lib-progress-bar>`,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/paginator/paginator.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<PaginatorComponent>",
                "defaultValue": "{\n  args: {\n    length: 100,\n    pageSize: 10,\n    pageIndex: 0,\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'home',\n    size: 'md',\n    color: 'text-gray-500',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-icon [name]=\"name\" [size]=\"size\" [color]=\"color\"></lib-icon>`,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    progress: 25,\n    color: \"primary\",\n    variant: 'determinate',\n    bufferProgress: 0\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
            },
            {
                "name": "Determinate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    mode: 'determinate',\n    value: 50,\n  },\n}"
            },
            {
                "name": "DeterminateProgress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    mode: 'determinate',\n    value: 75,\n    size: 50,\n    thickness: 5,\n    color: '#10b981', // Tailwind green-500\n  },\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'primary',\n    disabled: true,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Disabled Button</lib-button>`,\n  }),\n}"
            },
            {
                "name": "DismissibleError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    message: 'Something went wrong',\n    type: 'error',\n    dismissible: true,\n    duration: 0,\n    position: 'top-right',\n  },\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    state: 'error',\n    placeholder: 'Error state',\n  },\n}"
            },
            {
                "name": "Filled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'filled',\n    placeholder: 'Filled input',\n  },\n}"
            },
            {
                "name": "GreenBuffer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    progress: 40,\n    bufferProgress: 5,\n    color: 'success',\n    variant: 'buffer',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [buffer]=\"buffer\" [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
            },
            {
                "name": "GreenProgress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    progress: 70,\n    color: 'success',\n    variant: 'determinate',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'lg',\n    placeholder: 'Large input',\n  },\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 60,\n  },\n}"
            },
            {
                "name": "LargeRedIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'favorite',\n    size: 'xl',\n    color: 'text-red-500',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-icon [name]=\"name\" [size]=\"size\" [color]=\"color\"></lib-icon>`,\n  }),\n}"
            },
            {
                "name": "link",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "document.createElement('link')"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  title: 'Components/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['primary', 'accent', 'outline', 'text'],\n      description: 'Button style variant',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Disables the button',\n    },\n    class: {\n      control: 'text',\n      description: 'Additional Tailwind CSS classes for customization',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AlertComponent>",
                "defaultValue": "{\n  title: 'Components/Alert',\n  component: AlertComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideAnimations()],\n    }),\n  ],\n  args: {},\n  argTypes: {\n    message: { control: 'text' },\n    type: {\n      control: 'select',\n      options: ['success', 'warning', 'error', 'info'],\n    },\n    duration: { control: 'number' },\n    action: { control: 'text' },\n    dismissible: { control: 'boolean' },\n    position: {\n      control: 'select',\n      options: [\n        'top-left',\n        'top-center',\n        'top-right',\n        'bottom-left',\n        'bottom-center',\n        'bottom-right',\n      ],\n    },\n    icon: {\n      control: 'select',\n      options: [\n        '',\n        'pizza',\n        'mood',\n        'star',\n        'favorite',\n        'thumb_up',\n        'lightbulb',\n        'coffee',\n        'cloud',\n        'music_note',\n        'pets',\n        'rocket',\n        'beach_access',\n      ],\n    },\n    animation: { control: 'select', options: ['fade', 'slide'] },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<InputComponent>",
                "defaultValue": "{\n  title: 'Form/Input',\n  component: InputComponent,\n  tags: ['autodocs'],\n  render: (args: InputComponent) => ({ props: args }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<LoadingSpinnerComponent>",
                "defaultValue": "{\n  title: 'Components/LoadingSpinnerComponent',\n  component: LoadingSpinnerComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    mode: {\n      control: 'select',\n      options: ['determinate', 'indeterminate'],\n      description: 'Loading state',\n    },\n    value: {\n      control: 'number',\n      description: 'Progress value (0-100) for determinate mode',\n    },\n    size: { control: 'number', description: 'Diameter in pixels' },\n    thickness: { control: 'number', description: 'Stroke width in pixels' },\n    color: {\n      control: 'color',\n      description: 'Spinner color (hex or Tailwind color)',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<IconComponent>",
                "defaultValue": "{\n  title: 'Components/Icon',\n  component: IconComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    name: { control: 'text', description: 'Icon name from Material Icons' },\n    size: { \n      control: 'radio', \n      options: ['sm', 'md', 'lg', 'xl'], \n      description: 'Size of the icon' \n    },\n    color: { control: 'text', description: 'Tailwind color classes' },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ProgressBarComponent>",
                "defaultValue": "{\n  title: 'Components/Progress Bar',\n  component: ProgressBarComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    progress: {\n      control: { type: 'range', min: 0, max: 100, step: 1 },\n      description: 'Progress percentage (0 to 100)',\n    },\n    // buffer: {\n    //   control: { type: 'range', min: 0, max: 100, step: 1 },\n    //   description: 'Buffer progress percentage (used in buffer variant)',\n    // },\n    color: {\n      control: 'select',\n      options: ['primary', 'secondary', 'success', 'error'],\n      description: 'Color of the progress bar',\n    },\n    variant: {\n      control: 'select',\n      options: ['determinate', 'indeterminate', 'buffer', 'query'],\n      description: 'Progress bar type',\n    },\n    // class: {\n    //   control: 'text',\n    //   description: 'Additional Tailwind CSS classes for customization',\n    // },\n  },\n}"
            },
            {
                "name": "Outline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'outline',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Outline Button</lib-button>`,\n  }),\n}"
            },
            {
                "name": "Outline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'outline',\n    placeholder: 'Outline input',\n  },\n}"
            },
            {
                "name": "parameters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  actions: { argTypesRegex: '^on[A-Z].*' },\n  controls: {\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/,\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'primary',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Primary Button</lib-button>`,\n  }),\n}"
            },
            {
                "name": "RedIndeterminate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    color: 'error',\n    variant: 'indeterminate',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
            },
            {
                "name": "SmallBlueIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'star',\n    size: 'sm',\n    color: 'text-blue-500',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-icon [name]=\"name\" [size]=\"size\" [color]=\"color\"></lib-icon>`,\n  }),\n}"
            },
            {
                "name": "StackedAlerts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<>",
                "defaultValue": "{\n  render: (args: StackedAlertsArgs) => ({\n    props: args,\n    template: `\n      <lib-alert\n        [message]=\"firstMessage\"\n        [type]=\"firstType\"\n        [action]=\"firstAction\"\n        [dismissible]=\"firstDismissible\"\n        [icon]=\"firstIcon\"\n        [duration]=\"firstDuration\"\n        [animation]=\"firstAnimation\"\n        [position]=\"firstPosition\"\n        [bypassDuplicateCheck]=\"true\"\n      ></lib-alert>\n      <lib-alert\n        [message]=\"secondMessage\"\n        [type]=\"secondType\"\n        [action]=\"secondAction\"\n        [dismissible]=\"secondDismissible\"\n        [icon]=\"secondIcon\"\n        [duration]=\"secondDuration\"\n        [animation]=\"secondAnimation\"\n        [position]=\"secondPosition\"\n        [bypassDuplicateCheck]=\"true\"\n      ></lib-alert>\n      <lib-alert\n        [message]=\"thirdMessage\"\n        [type]=\"thirdType\"\n        [action]=\"thirdAction\"\n        [dismissible]=\"thirdDismissible\"\n        [icon]=\"thirdIcon\"\n        [duration]=\"thirdDuration\"\n        [animation]=\"thirdAnimation\"\n        [position]=\"thirdPosition\"\n        [bypassDuplicateCheck]=\"true\"\n      ></lib-alert>\n    `,\n  }),\n  args: {\n    firstMessage: 'First alert',\n    firstType: 'success',\n    firstAction: null,\n    firstDismissible: true,\n    firstIcon: 'star',\n    firstDuration: 50000,\n    firstAnimation: 'slide',\n    firstPosition: 'top-right',\n\n    secondMessage: 'Second alert',\n    secondType: 'warning',\n    secondAction: null,\n    secondDismissible: true,\n    secondIcon: null,\n    secondDuration: 50000,\n    secondAnimation: 'slide',\n    secondPosition: 'top-right',\n\n    thirdMessage: 'Third alert',\n    thirdType: 'error',\n    thirdAction: null,\n    thirdDismissible: true,\n    thirdIcon: null,\n    thirdDuration: 50000,\n    thirdAnimation: 'slide',\n    thirdPosition: 'top-right',\n  } as StackedAlertsArgs,\n  argTypes: {\n    // First Alert Controls\n    firstMessage: {\n      control: { type: 'text', disable: false },\n      name: 'First Alert Message',\n    },\n    firstType: {\n      control: 'select',\n      options: ['success', 'error', 'warning', 'info'],\n      name: 'First Alert Type',\n    },\n    firstAction: {\n      control: { type: 'text', disable: false },\n      name: 'First Alert Action',\n    },\n    firstDismissible: { control: 'boolean', name: 'First Alert Dismissible' },\n    firstIcon: {\n      control: 'select',\n      options: [\n        '',\n        'pizza',\n        'mood',\n        'star',\n        'favorite',\n        'thumb_up',\n        'lightbulb',\n        'coffee',\n        'cloud',\n        'music_note',\n        'pets',\n        'rocket',\n        'beach_access',\n      ],\n      name: 'First Alert Icon',\n    },\n    firstDuration: { control: 'number', name: 'First Alert Duration' },\n    firstAnimation: {\n      control: 'select',\n      options: ['fade', 'slide'],\n      name: 'First Alert Animation',\n    },\n    firstPosition: {\n      control: 'select',\n      options: [\n        'top-left',\n        'top-center',\n        'top-right',\n        'bottom-left',\n        'bottom-center',\n        'bottom-right',\n      ],\n      name: 'First Alert Position',\n    },\n\n    // Second Alert Controls\n    secondMessage: {\n      control: { type: 'text', disable: false },\n      name: 'Second Alert Message',\n    },\n    secondType: {\n      control: 'select',\n      options: ['success', 'error', 'warning', 'info'],\n      name: 'Second Alert Type',\n    },\n    secondAction: {\n      control: { type: 'text', disable: false },\n      name: 'Second Alert Action',\n    },\n    secondDismissible: { control: 'boolean', name: 'Second Alert Dismissible' },\n    secondIcon: {\n      control: 'select',\n      options: [\n        '',\n        'pizza',\n        'mood',\n        'star',\n        'favorite',\n        'thumb_up',\n        'lightbulb',\n        'coffee',\n        'cloud',\n        'music_note',\n        'pets',\n        'rocket',\n        'beach_access',\n      ],\n      name: 'Second Alert Icon',\n    },\n    secondDuration: { control: 'number', name: 'Second Alert Duration' },\n    secondAnimation: {\n      control: 'select',\n      options: ['fade', 'slide'],\n      name: 'Second Alert Animation',\n    },\n    secondPosition: {\n      control: 'select',\n      options: [\n        'top-left',\n        'top-center',\n        'top-right',\n        'bottom-left',\n        'bottom-center',\n        'bottom-right',\n      ],\n      name: 'Second Alert Position',\n    },\n\n    // Third Alert Controls\n    thirdMessage: {\n      control: { type: 'text', disable: false },\n      name: 'Third Alert Message',\n    },\n    thirdType: {\n      control: 'select',\n      options: ['success', 'error', 'warning', 'info'],\n      name: 'Third Alert Type',\n    },\n    thirdAction: {\n      control: { type: 'text', disable: false },\n      name: 'Third Alert Action',\n    },\n    thirdDismissible: { control: 'boolean', name: 'Third Alert Dismissible' },\n    thirdIcon: {\n      control: 'select',\n      options: [\n        '',\n        'pizza',\n        'mood',\n        'star',\n        'favorite',\n        'thumb_up',\n        'lightbulb',\n        'coffee',\n        'cloud',\n        'music_note',\n        'pets',\n        'rocket',\n        'beach_access',\n      ],\n      name: 'Third Alert Icon',\n    },\n    thirdDuration: { control: 'number', name: 'Third Alert Duration' },\n    thirdAnimation: {\n      control: 'select',\n      options: ['fade', 'slide'],\n      name: 'Third Alert Animation',\n    },\n    thirdPosition: {\n      control: 'select',\n      options: [\n        'top-left',\n        'top-center',\n        'top-right',\n        'bottom-left',\n        'bottom-center',\n        'bottom-right',\n      ],\n      name: 'Third Alert Position',\n    },\n\n    // Remove inherited fields that are not used in this story\n    message: { table: { disable: true } },\n    type: { table: { disable: true } },\n    duration: { table: { disable: true } },\n    action: { table: { disable: true } },\n    dismissible: { table: { disable: true } },\n    position: { table: { disable: true } },\n    icon: { table: { disable: true } },\n    animation: { table: { disable: true } },\n  },\n}"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    state: 'success',\n    placeholder: 'Success state',\n  },\n}"
            },
            {
                "name": "SuccessWithAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    message: 'Data saved successfully',\n    type: 'success',\n    action: 'Undo',\n    duration: 3000,\n    position: 'bottom-center',\n  },\n}"
            },
            {
                "name": "Text",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'text',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Text Button</lib-button>`,\n  }),\n}"
            },
            {
                "name": "Thick",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    thickness: 6,\n  },\n}"
            },
            {
                "name": "WarningWithCustomIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    message: 'Custom icon alert',\n    type: 'warning',\n    icon: 'star',\n    dismissible: true,\n    duration: 5000,\n    position: 'top-center',\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AlertComponent>",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InputComponent>",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LoadingSpinnerComponent>",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<IconComponent>",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ProgressBarComponent>",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts": [
                {
                    "name": "Accent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'accent',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Accent Button</lib-button>`,\n  }),\n}"
                },
                {
                    "name": "CustomStyled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'primary',\n    class: 'text-lg px-6 py-3 bg-green-500 hover:bg-green-600',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [class]=\"class\">Custom Styled Button</lib-button>`,\n  }),\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'primary',\n    disabled: true,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Disabled Button</lib-button>`,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  title: 'Components/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['primary', 'accent', 'outline', 'text'],\n      description: 'Button style variant',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Disables the button',\n    },\n    class: {\n      control: 'text',\n      description: 'Additional Tailwind CSS classes for customization',\n    },\n  },\n}"
                },
                {
                    "name": "Outline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'outline',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Outline Button</lib-button>`,\n  }),\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'primary',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Primary Button</lib-button>`,\n  }),\n}"
                },
                {
                    "name": "Text",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'text',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Text Button</lib-button>`,\n  }),\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts": [
                {
                    "name": "BasicSnackBar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    message: 'Disco party!',\n    type: 'info',\n    action: 'Dance',\n    duration: 5000,\n    position: 'bottom-center',\n  },\n}"
                },
                {
                    "name": "ConfigurablePosition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    message: 'Pool party!',\n    type: 'info',\n    duration: 5000,\n    position: 'bottom-right',\n  },\n}"
                },
                {
                    "name": "DismissibleError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    message: 'Something went wrong',\n    type: 'error',\n    dismissible: true,\n    duration: 0,\n    position: 'top-right',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AlertComponent>",
                    "defaultValue": "{\n  title: 'Components/Alert',\n  component: AlertComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideAnimations()],\n    }),\n  ],\n  args: {},\n  argTypes: {\n    message: { control: 'text' },\n    type: {\n      control: 'select',\n      options: ['success', 'warning', 'error', 'info'],\n    },\n    duration: { control: 'number' },\n    action: { control: 'text' },\n    dismissible: { control: 'boolean' },\n    position: {\n      control: 'select',\n      options: [\n        'top-left',\n        'top-center',\n        'top-right',\n        'bottom-left',\n        'bottom-center',\n        'bottom-right',\n      ],\n    },\n    icon: {\n      control: 'select',\n      options: [\n        '',\n        'pizza',\n        'mood',\n        'star',\n        'favorite',\n        'thumb_up',\n        'lightbulb',\n        'coffee',\n        'cloud',\n        'music_note',\n        'pets',\n        'rocket',\n        'beach_access',\n      ],\n    },\n    animation: { control: 'select', options: ['fade', 'slide'] },\n  },\n}"
                },
                {
                    "name": "StackedAlerts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<>",
                    "defaultValue": "{\n  render: (args: StackedAlertsArgs) => ({\n    props: args,\n    template: `\n      <lib-alert\n        [message]=\"firstMessage\"\n        [type]=\"firstType\"\n        [action]=\"firstAction\"\n        [dismissible]=\"firstDismissible\"\n        [icon]=\"firstIcon\"\n        [duration]=\"firstDuration\"\n        [animation]=\"firstAnimation\"\n        [position]=\"firstPosition\"\n        [bypassDuplicateCheck]=\"true\"\n      ></lib-alert>\n      <lib-alert\n        [message]=\"secondMessage\"\n        [type]=\"secondType\"\n        [action]=\"secondAction\"\n        [dismissible]=\"secondDismissible\"\n        [icon]=\"secondIcon\"\n        [duration]=\"secondDuration\"\n        [animation]=\"secondAnimation\"\n        [position]=\"secondPosition\"\n        [bypassDuplicateCheck]=\"true\"\n      ></lib-alert>\n      <lib-alert\n        [message]=\"thirdMessage\"\n        [type]=\"thirdType\"\n        [action]=\"thirdAction\"\n        [dismissible]=\"thirdDismissible\"\n        [icon]=\"thirdIcon\"\n        [duration]=\"thirdDuration\"\n        [animation]=\"thirdAnimation\"\n        [position]=\"thirdPosition\"\n        [bypassDuplicateCheck]=\"true\"\n      ></lib-alert>\n    `,\n  }),\n  args: {\n    firstMessage: 'First alert',\n    firstType: 'success',\n    firstAction: null,\n    firstDismissible: true,\n    firstIcon: 'star',\n    firstDuration: 50000,\n    firstAnimation: 'slide',\n    firstPosition: 'top-right',\n\n    secondMessage: 'Second alert',\n    secondType: 'warning',\n    secondAction: null,\n    secondDismissible: true,\n    secondIcon: null,\n    secondDuration: 50000,\n    secondAnimation: 'slide',\n    secondPosition: 'top-right',\n\n    thirdMessage: 'Third alert',\n    thirdType: 'error',\n    thirdAction: null,\n    thirdDismissible: true,\n    thirdIcon: null,\n    thirdDuration: 50000,\n    thirdAnimation: 'slide',\n    thirdPosition: 'top-right',\n  } as StackedAlertsArgs,\n  argTypes: {\n    // First Alert Controls\n    firstMessage: {\n      control: { type: 'text', disable: false },\n      name: 'First Alert Message',\n    },\n    firstType: {\n      control: 'select',\n      options: ['success', 'error', 'warning', 'info'],\n      name: 'First Alert Type',\n    },\n    firstAction: {\n      control: { type: 'text', disable: false },\n      name: 'First Alert Action',\n    },\n    firstDismissible: { control: 'boolean', name: 'First Alert Dismissible' },\n    firstIcon: {\n      control: 'select',\n      options: [\n        '',\n        'pizza',\n        'mood',\n        'star',\n        'favorite',\n        'thumb_up',\n        'lightbulb',\n        'coffee',\n        'cloud',\n        'music_note',\n        'pets',\n        'rocket',\n        'beach_access',\n      ],\n      name: 'First Alert Icon',\n    },\n    firstDuration: { control: 'number', name: 'First Alert Duration' },\n    firstAnimation: {\n      control: 'select',\n      options: ['fade', 'slide'],\n      name: 'First Alert Animation',\n    },\n    firstPosition: {\n      control: 'select',\n      options: [\n        'top-left',\n        'top-center',\n        'top-right',\n        'bottom-left',\n        'bottom-center',\n        'bottom-right',\n      ],\n      name: 'First Alert Position',\n    },\n\n    // Second Alert Controls\n    secondMessage: {\n      control: { type: 'text', disable: false },\n      name: 'Second Alert Message',\n    },\n    secondType: {\n      control: 'select',\n      options: ['success', 'error', 'warning', 'info'],\n      name: 'Second Alert Type',\n    },\n    secondAction: {\n      control: { type: 'text', disable: false },\n      name: 'Second Alert Action',\n    },\n    secondDismissible: { control: 'boolean', name: 'Second Alert Dismissible' },\n    secondIcon: {\n      control: 'select',\n      options: [\n        '',\n        'pizza',\n        'mood',\n        'star',\n        'favorite',\n        'thumb_up',\n        'lightbulb',\n        'coffee',\n        'cloud',\n        'music_note',\n        'pets',\n        'rocket',\n        'beach_access',\n      ],\n      name: 'Second Alert Icon',\n    },\n    secondDuration: { control: 'number', name: 'Second Alert Duration' },\n    secondAnimation: {\n      control: 'select',\n      options: ['fade', 'slide'],\n      name: 'Second Alert Animation',\n    },\n    secondPosition: {\n      control: 'select',\n      options: [\n        'top-left',\n        'top-center',\n        'top-right',\n        'bottom-left',\n        'bottom-center',\n        'bottom-right',\n      ],\n      name: 'Second Alert Position',\n    },\n\n    // Third Alert Controls\n    thirdMessage: {\n      control: { type: 'text', disable: false },\n      name: 'Third Alert Message',\n    },\n    thirdType: {\n      control: 'select',\n      options: ['success', 'error', 'warning', 'info'],\n      name: 'Third Alert Type',\n    },\n    thirdAction: {\n      control: { type: 'text', disable: false },\n      name: 'Third Alert Action',\n    },\n    thirdDismissible: { control: 'boolean', name: 'Third Alert Dismissible' },\n    thirdIcon: {\n      control: 'select',\n      options: [\n        '',\n        'pizza',\n        'mood',\n        'star',\n        'favorite',\n        'thumb_up',\n        'lightbulb',\n        'coffee',\n        'cloud',\n        'music_note',\n        'pets',\n        'rocket',\n        'beach_access',\n      ],\n      name: 'Third Alert Icon',\n    },\n    thirdDuration: { control: 'number', name: 'Third Alert Duration' },\n    thirdAnimation: {\n      control: 'select',\n      options: ['fade', 'slide'],\n      name: 'Third Alert Animation',\n    },\n    thirdPosition: {\n      control: 'select',\n      options: [\n        'top-left',\n        'top-center',\n        'top-right',\n        'bottom-left',\n        'bottom-center',\n        'bottom-right',\n      ],\n      name: 'Third Alert Position',\n    },\n\n    // Remove inherited fields that are not used in this story\n    message: { table: { disable: true } },\n    type: { table: { disable: true } },\n    duration: { table: { disable: true } },\n    action: { table: { disable: true } },\n    dismissible: { table: { disable: true } },\n    position: { table: { disable: true } },\n    icon: { table: { disable: true } },\n    animation: { table: { disable: true } },\n  },\n}"
                },
                {
                    "name": "SuccessWithAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    message: 'Data saved successfully',\n    type: 'success',\n    action: 'Undo',\n    duration: 3000,\n    position: 'bottom-center',\n  },\n}"
                },
                {
                    "name": "WarningWithCustomIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    message: 'Custom icon alert',\n    type: 'warning',\n    icon: 'star',\n    dismissible: true,\n    duration: 5000,\n    position: 'top-center',\n  },\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts": [
                {
                    "name": "Colored",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    color: '#ef4444', // Tailwind red-500\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                },
                {
                    "name": "Determinate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    mode: 'determinate',\n    value: 50,\n  },\n}"
                },
                {
                    "name": "DeterminateProgress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    mode: 'determinate',\n    value: 75,\n    size: 50,\n    thickness: 5,\n    color: '#10b981', // Tailwind green-500\n  },\n}"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 60,\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<LoadingSpinnerComponent>",
                    "defaultValue": "{\n  title: 'Components/LoadingSpinnerComponent',\n  component: LoadingSpinnerComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    mode: {\n      control: 'select',\n      options: ['determinate', 'indeterminate'],\n      description: 'Loading state',\n    },\n    value: {\n      control: 'number',\n      description: 'Progress value (0-100) for determinate mode',\n    },\n    size: { control: 'number', description: 'Diameter in pixels' },\n    thickness: { control: 'number', description: 'Stroke width in pixels' },\n    color: {\n      control: 'color',\n      description: 'Spinner color (hex or Tailwind color)',\n    },\n  },\n}"
                },
                {
                    "name": "Thick",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    thickness: 6,\n  },\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/.storybook/main.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/.storybook/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorybookConfig",
                    "defaultValue": "{\n  stories: ['../**/*.@(mdx|stories.@(js|jsx|ts|tsx))'],\n  addons: ['@storybook/addon-essentials', '@storybook/addon-interactions'],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n  docs: {\n    autodocs: true,\n    defaultName: 'Docs',\n  },\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts": [
                {
                    "name": "CustomStyled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    progress: 60,\n    color: 'primary',\n    variant: 'determinate',\n    class: 'h-6 rounded-lg',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [color]=\"color\" [variant]=\"variant\" [class]=\"class\"></lib-progress-bar>`,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    progress: 25,\n    color: \"primary\",\n    variant: 'determinate',\n    bufferProgress: 0\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
                },
                {
                    "name": "GreenBuffer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    progress: 40,\n    bufferProgress: 5,\n    color: 'success',\n    variant: 'buffer',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [buffer]=\"buffer\" [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
                },
                {
                    "name": "GreenProgress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    progress: 70,\n    color: 'success',\n    variant: 'determinate',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ProgressBarComponent>",
                    "defaultValue": "{\n  title: 'Components/Progress Bar',\n  component: ProgressBarComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    progress: {\n      control: { type: 'range', min: 0, max: 100, step: 1 },\n      description: 'Progress percentage (0 to 100)',\n    },\n    // buffer: {\n    //   control: { type: 'range', min: 0, max: 100, step: 1 },\n    //   description: 'Buffer progress percentage (used in buffer variant)',\n    // },\n    color: {\n      control: 'select',\n      options: ['primary', 'secondary', 'success', 'error'],\n      description: 'Color of the progress bar',\n    },\n    variant: {\n      control: 'select',\n      options: ['determinate', 'indeterminate', 'buffer', 'query'],\n      description: 'Progress bar type',\n    },\n    // class: {\n    //   control: 'text',\n    //   description: 'Additional Tailwind CSS classes for customization',\n    // },\n  },\n}"
                },
                {
                    "name": "RedIndeterminate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    color: 'error',\n    variant: 'indeterminate',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/paginator/paginator.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/paginator/paginator.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<PaginatorComponent>",
                    "defaultValue": "{\n  args: {\n    length: 100,\n    pageSize: 10,\n    pageIndex: 0,\n  },\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'home',\n    size: 'md',\n    color: 'text-gray-500',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-icon [name]=\"name\" [size]=\"size\" [color]=\"color\"></lib-icon>`,\n  }),\n}"
                },
                {
                    "name": "LargeRedIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'favorite',\n    size: 'xl',\n    color: 'text-red-500',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-icon [name]=\"name\" [size]=\"size\" [color]=\"color\"></lib-icon>`,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<IconComponent>",
                    "defaultValue": "{\n  title: 'Components/Icon',\n  component: IconComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    name: { control: 'text', description: 'Icon name from Material Icons' },\n    size: { \n      control: 'radio', \n      options: ['sm', 'md', 'lg', 'xl'], \n      description: 'Size of the icon' \n    },\n    color: { control: 'text', description: 'Tailwind color classes' },\n  },\n}"
                },
                {
                    "name": "SmallBlueIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'star',\n    size: 'sm',\n    color: 'text-blue-500',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-icon [name]=\"name\" [size]=\"size\" [color]=\"color\"></lib-icon>`,\n  }),\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    state: 'error',\n    placeholder: 'Error state',\n  },\n}"
                },
                {
                    "name": "Filled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'filled',\n    placeholder: 'Filled input',\n  },\n}"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'lg',\n    placeholder: 'Large input',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<InputComponent>",
                    "defaultValue": "{\n  title: 'Form/Input',\n  component: InputComponent,\n  tags: ['autodocs'],\n  render: (args: InputComponent) => ({ props: args }),\n}"
                },
                {
                    "name": "Outline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'outline',\n    placeholder: 'Outline input',\n  },\n}"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    state: 'success',\n    placeholder: 'Success state',\n  },\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/.storybook/preview.ts": [
                {
                    "name": "link",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "document.createElement('link')"
                },
                {
                    "name": "parameters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  actions: { argTypesRegex: '^on[A-Z].*' },\n  controls: {\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/,\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AlertComponent>",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InputComponent>",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LoadingSpinnerComponent>",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<IconComponent>",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ProgressBarComponent>",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "libs/ngx-tailwind-flex-ui/.storybook/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "link",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parameters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StackedAlertsArgs",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicSnackBar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ConfigurablePosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DismissibleError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StackedAlerts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SuccessWithAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WarningWithCustomIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Accent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomStyled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Outline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Text",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LargeRedIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SmallBlueIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Filled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Outline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Colored",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Determinate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeterminateProgress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Thick",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingSpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/paginator/paginator.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomStyled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GreenBuffer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GreenProgress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RedIndeterminate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            }
        ]
    }
}