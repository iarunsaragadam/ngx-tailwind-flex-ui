{
    "pipes": [],
    "interfaces": [
        {
            "name": "StackedAlertsArgs",
            "id": "interface-StackedAlertsArgs-e4387f63dea172eb1a19f7906012e497d3884d459eab3517eb0429bbd3bb2e0a7bb7f32725bc43dde4de6e49a89bbe3cb3edc1a4c61c69f9e9ccd8b738b3969c",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj } from '@storybook/angular';\r\nimport { AlertComponent } from './alert.component';\r\nimport { applicationConfig } from '@storybook/angular';\r\nimport { provideAnimations } from '@angular/platform-browser/animations';\r\n\r\n// Define the interface for the StackedAlerts story with flat properties\r\ninterface StackedAlertsArgs {\r\n  firstMessage: string;\r\n  firstType: 'success' | 'error' | 'warning' | 'info';\r\n  firstAction: string | null;\r\n  firstDismissible: boolean;\r\n  firstIcon: string | null;\r\n  firstDuration: number;\r\n  firstAnimation: 'fade' | 'slide';\r\n  firstPosition:\r\n    | 'top-left'\r\n    | 'top-center'\r\n    | 'top-right'\r\n    | 'bottom-left'\r\n    | 'bottom-center'\r\n    | 'bottom-right';\r\n\r\n  secondMessage: string;\r\n  secondType: 'success' | 'error' | 'warning' | 'info';\r\n  secondAction: string | null;\r\n  secondDismissible: boolean;\r\n  secondIcon: string | null;\r\n  secondDuration: number;\r\n  secondAnimation: 'fade' | 'slide';\r\n  secondPosition:\r\n    | 'top-left'\r\n    | 'top-center'\r\n    | 'top-right'\r\n    | 'bottom-left'\r\n    | 'bottom-center'\r\n    | 'bottom-right';\r\n\r\n  thirdMessage: string;\r\n  thirdType: 'success' | 'error' | 'warning' | 'info';\r\n  thirdAction: string | null;\r\n  thirdDismissible: boolean;\r\n  thirdIcon: string | null;\r\n  thirdDuration: number;\r\n  thirdAnimation: 'fade' | 'slide';\r\n  thirdPosition:\r\n    | 'top-left'\r\n    | 'top-center'\r\n    | 'top-right'\r\n    | 'bottom-left'\r\n    | 'bottom-center'\r\n    | 'bottom-right';\r\n}\r\n\r\nconst meta: Meta<AlertComponent> = {\r\n  title: 'Components/Alert',\r\n  component: AlertComponent,\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [provideAnimations()],\r\n    }),\r\n  ],\r\n  args: {},\r\n  argTypes: {\r\n    message: { control: 'text' },\r\n    type: {\r\n      control: 'select',\r\n      options: ['success', 'warning', 'error', 'info'],\r\n    },\r\n    duration: { control: 'number' },\r\n    action: { control: 'text' },\r\n    dismissible: { control: 'boolean' },\r\n    position: {\r\n      control: 'select',\r\n      options: [\r\n        'top-left',\r\n        'top-center',\r\n        'top-right',\r\n        'bottom-left',\r\n        'bottom-center',\r\n        'bottom-right',\r\n      ],\r\n    },\r\n    icon: {\r\n      control: 'select',\r\n      options: [\r\n        '',\r\n        'pizza',\r\n        'mood',\r\n        'star',\r\n        'favorite',\r\n        'thumb_up',\r\n        'lightbulb',\r\n        'coffee',\r\n        'cloud',\r\n        'music_note',\r\n        'pets',\r\n        'rocket',\r\n        'beach_access',\r\n      ],\r\n    },\r\n    animation: { control: 'select', options: ['fade', 'slide'] },\r\n  },\r\n};\r\n\r\nexport default meta;\r\n\r\ntype Story = StoryObj<AlertComponent>;\r\n\r\nexport const BasicSnackBar: Story = {\r\n  args: {\r\n    message: 'Disco party!',\r\n    type: 'info',\r\n    action: 'Dance',\r\n    duration: 5000,\r\n    position: 'bottom-center',\r\n  },\r\n};\r\n\r\nexport const ConfigurablePosition: Story = {\r\n  args: {\r\n    message: 'Pool party!',\r\n    type: 'info',\r\n    duration: 5000,\r\n    position: 'bottom-right',\r\n  },\r\n};\r\n\r\nexport const DismissibleError: Story = {\r\n  args: {\r\n    message: 'Something went wrong',\r\n    type: 'error',\r\n    dismissible: true,\r\n    duration: 0,\r\n    position: 'top-right',\r\n  },\r\n};\r\n\r\nexport const SuccessWithAction: Story = {\r\n  args: {\r\n    message: 'Data saved successfully',\r\n    type: 'success',\r\n    action: 'Undo',\r\n    duration: 3000,\r\n    position: 'bottom-center',\r\n  },\r\n};\r\n\r\nexport const WarningWithCustomIcon: Story = {\r\n  args: {\r\n    message: 'Custom icon alert',\r\n    type: 'warning',\r\n    icon: 'star',\r\n    dismissible: true,\r\n    duration: 5000,\r\n    position: 'top-center',\r\n  },\r\n};\r\n\r\nexport const StackedAlerts: StoryObj<AlertComponent & StackedAlertsArgs> = {\r\n  render: (args: StackedAlertsArgs) => ({\r\n    props: args,\r\n    template: `\r\n      <lib-alert\r\n        [message]=\"firstMessage\"\r\n        [type]=\"firstType\"\r\n        [action]=\"firstAction\"\r\n        [dismissible]=\"firstDismissible\"\r\n        [icon]=\"firstIcon\"\r\n        [duration]=\"firstDuration\"\r\n        [animation]=\"firstAnimation\"\r\n        [position]=\"firstPosition\"\r\n        [bypassDuplicateCheck]=\"true\"\r\n      ></lib-alert>\r\n      <lib-alert\r\n        [message]=\"secondMessage\"\r\n        [type]=\"secondType\"\r\n        [action]=\"secondAction\"\r\n        [dismissible]=\"secondDismissible\"\r\n        [icon]=\"secondIcon\"\r\n        [duration]=\"secondDuration\"\r\n        [animation]=\"secondAnimation\"\r\n        [position]=\"secondPosition\"\r\n        [bypassDuplicateCheck]=\"true\"\r\n      ></lib-alert>\r\n      <lib-alert\r\n        [message]=\"thirdMessage\"\r\n        [type]=\"thirdType\"\r\n        [action]=\"thirdAction\"\r\n        [dismissible]=\"thirdDismissible\"\r\n        [icon]=\"thirdIcon\"\r\n        [duration]=\"thirdDuration\"\r\n        [animation]=\"thirdAnimation\"\r\n        [position]=\"thirdPosition\"\r\n        [bypassDuplicateCheck]=\"true\"\r\n      ></lib-alert>\r\n    `,\r\n  }),\r\n  args: {\r\n    firstMessage: 'First alert',\r\n    firstType: 'success',\r\n    firstAction: null,\r\n    firstDismissible: true,\r\n    firstIcon: 'star',\r\n    firstDuration: 50000,\r\n    firstAnimation: 'slide',\r\n    firstPosition: 'top-right',\r\n\r\n    secondMessage: 'Second alert',\r\n    secondType: 'warning',\r\n    secondAction: null,\r\n    secondDismissible: true,\r\n    secondIcon: null,\r\n    secondDuration: 50000,\r\n    secondAnimation: 'slide',\r\n    secondPosition: 'top-right',\r\n\r\n    thirdMessage: 'Third alert',\r\n    thirdType: 'error',\r\n    thirdAction: null,\r\n    thirdDismissible: true,\r\n    thirdIcon: null,\r\n    thirdDuration: 50000,\r\n    thirdAnimation: 'slide',\r\n    thirdPosition: 'top-right',\r\n  } as StackedAlertsArgs,\r\n  argTypes: {\r\n    // First Alert Controls\r\n    firstMessage: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'First Alert Message',\r\n    },\r\n    firstType: {\r\n      control: 'select',\r\n      options: ['success', 'error', 'warning', 'info'],\r\n      name: 'First Alert Type',\r\n    },\r\n    firstAction: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'First Alert Action',\r\n    },\r\n    firstDismissible: { control: 'boolean', name: 'First Alert Dismissible' },\r\n    firstIcon: {\r\n      control: 'select',\r\n      options: [\r\n        '',\r\n        'pizza',\r\n        'mood',\r\n        'star',\r\n        'favorite',\r\n        'thumb_up',\r\n        'lightbulb',\r\n        'coffee',\r\n        'cloud',\r\n        'music_note',\r\n        'pets',\r\n        'rocket',\r\n        'beach_access',\r\n      ],\r\n      name: 'First Alert Icon',\r\n    },\r\n    firstDuration: { control: 'number', name: 'First Alert Duration' },\r\n    firstAnimation: {\r\n      control: 'select',\r\n      options: ['fade', 'slide'],\r\n      name: 'First Alert Animation',\r\n    },\r\n    firstPosition: {\r\n      control: 'select',\r\n      options: [\r\n        'top-left',\r\n        'top-center',\r\n        'top-right',\r\n        'bottom-left',\r\n        'bottom-center',\r\n        'bottom-right',\r\n      ],\r\n      name: 'First Alert Position',\r\n    },\r\n\r\n    // Second Alert Controls\r\n    secondMessage: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'Second Alert Message',\r\n    },\r\n    secondType: {\r\n      control: 'select',\r\n      options: ['success', 'error', 'warning', 'info'],\r\n      name: 'Second Alert Type',\r\n    },\r\n    secondAction: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'Second Alert Action',\r\n    },\r\n    secondDismissible: { control: 'boolean', name: 'Second Alert Dismissible' },\r\n    secondIcon: {\r\n      control: 'select',\r\n      options: [\r\n        '',\r\n        'pizza',\r\n        'mood',\r\n        'star',\r\n        'favorite',\r\n        'thumb_up',\r\n        'lightbulb',\r\n        'coffee',\r\n        'cloud',\r\n        'music_note',\r\n        'pets',\r\n        'rocket',\r\n        'beach_access',\r\n      ],\r\n      name: 'Second Alert Icon',\r\n    },\r\n    secondDuration: { control: 'number', name: 'Second Alert Duration' },\r\n    secondAnimation: {\r\n      control: 'select',\r\n      options: ['fade', 'slide'],\r\n      name: 'Second Alert Animation',\r\n    },\r\n    secondPosition: {\r\n      control: 'select',\r\n      options: [\r\n        'top-left',\r\n        'top-center',\r\n        'top-right',\r\n        'bottom-left',\r\n        'bottom-center',\r\n        'bottom-right',\r\n      ],\r\n      name: 'Second Alert Position',\r\n    },\r\n\r\n    // Third Alert Controls\r\n    thirdMessage: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'Third Alert Message',\r\n    },\r\n    thirdType: {\r\n      control: 'select',\r\n      options: ['success', 'error', 'warning', 'info'],\r\n      name: 'Third Alert Type',\r\n    },\r\n    thirdAction: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'Third Alert Action',\r\n    },\r\n    thirdDismissible: { control: 'boolean', name: 'Third Alert Dismissible' },\r\n    thirdIcon: {\r\n      control: 'select',\r\n      options: [\r\n        '',\r\n        'pizza',\r\n        'mood',\r\n        'star',\r\n        'favorite',\r\n        'thumb_up',\r\n        'lightbulb',\r\n        'coffee',\r\n        'cloud',\r\n        'music_note',\r\n        'pets',\r\n        'rocket',\r\n        'beach_access',\r\n      ],\r\n      name: 'Third Alert Icon',\r\n    },\r\n    thirdDuration: { control: 'number', name: 'Third Alert Duration' },\r\n    thirdAnimation: {\r\n      control: 'select',\r\n      options: ['fade', 'slide'],\r\n      name: 'Third Alert Animation',\r\n    },\r\n    thirdPosition: {\r\n      control: 'select',\r\n      options: [\r\n        'top-left',\r\n        'top-center',\r\n        'top-right',\r\n        'bottom-left',\r\n        'bottom-center',\r\n        'bottom-right',\r\n      ],\r\n      name: 'Third Alert Position',\r\n    },\r\n\r\n    // Remove inherited fields that are not used in this story\r\n    message: { table: { disable: true } },\r\n    type: { table: { disable: true } },\r\n    duration: { table: { disable: true } },\r\n    action: { table: { disable: true } },\r\n    dismissible: { table: { disable: true } },\r\n    position: { table: { disable: true } },\r\n    icon: { table: { disable: true } },\r\n    animation: { table: { disable: true } },\r\n  },\r\n};\r\n",
            "properties": [
                {
                    "name": "firstAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "firstAnimation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"fade\" | \"slide\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "firstDismissible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "firstDuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "firstIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "firstMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "firstPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "firstType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "secondAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "secondAnimation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"fade\" | \"slide\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "secondDismissible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "secondDuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "secondIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "secondMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "secondPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "secondType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "thirdAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "thirdAnimation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"fade\" | \"slide\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "thirdDismissible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "thirdDuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "thirdIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "thirdMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "thirdPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "thirdType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-2a9b209821bc6a9a2f45202259c4c85ef089278fbbd9bb1bbcad0ae0d87d7bbe40d7771efc2b1727088ff7ece7a9aab4f00bc109759f5ef8b15f27bf9e807a00",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-alert",
            "styleUrls": [
                "./alert.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "action",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "actionTemplate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 145,
                    "type": "TemplateRef<> | null",
                    "decorators": []
                },
                {
                    "name": "animation",
                    "defaultValue": "'fade'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 144,
                    "type": "\"fade\" | \"slide\"",
                    "decorators": []
                },
                {
                    "name": "bypassDuplicateCheck",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 146,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 136,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "dismissible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "duration",
                    "defaultValue": "5000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 125,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "iconColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 127,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionClicked",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 148,
                    "type": "EventEmitter"
                },
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 149,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_customClass",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_iconColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_position",
                    "defaultValue": "'top-right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_type",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "activeAlerts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AlertComponent[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123,
                        126
                    ]
                },
                {
                    "name": "isVisible",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 151
                },
                {
                    "name": "offset",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "timer",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReturnType<> | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 153,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAnimationParams",
                    "args": [],
                    "optional": false,
                    "returnType": "{ startTransform: string; endTransform: string; }",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pauseTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resumeTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updatePositions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 307,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  AfterViewInit,\r\n  OnDestroy,\r\n  TemplateRef,\r\n  Output,\r\n  EventEmitter,\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: 'lib-alert',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './alert.component.html',\r\n  styleUrls: ['./alert.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('fadeInOut', [\r\n      transition(':enter', [\r\n        style({ opacity: 0 }),\r\n        animate('300ms ease-in', style({ opacity: 1 })),\r\n      ]),\r\n      transition(':leave', [animate('300ms ease-out', style({ opacity: 0 }))]),\r\n    ]),\r\n    trigger('slideInOut', [\r\n      transition(\r\n        ':enter',\r\n        [\r\n          style({ transform: '{{startTransform}}' }),\r\n          animate('300ms ease-in', style({ transform: '{{endTransform}}' })),\r\n        ],\r\n        {\r\n          params: {\r\n            startTransform: 'translateY(-100%)',\r\n            endTransform: 'translateY(0%)',\r\n          },\r\n        }\r\n      ),\r\n      transition(\r\n        ':leave',\r\n        [animate('300ms ease-out', style({ transform: '{{startTransform}}' }))],\r\n        {\r\n          params: {\r\n            startTransform: 'translateY(-100%)',\r\n            endTransform: 'translateY(0%)',\r\n          },\r\n        }\r\n      ),\r\n    ]),\r\n  ],\r\n})\r\nexport class AlertComponent implements AfterViewInit, OnDestroy {\r\n  private static activeAlerts: AlertComponent[] = [];\r\n  private _type: 'success' | 'error' | 'warning' | 'info' = 'info';\r\n  private _position:\r\n    | 'top-left'\r\n    | 'top-center'\r\n    | 'top-right'\r\n    | 'bottom-left'\r\n    | 'bottom-center'\r\n    | 'bottom-right' = 'top-right';\r\n  private _iconColor: string | null = null;\r\n  private _customClass: string | null = null;\r\n\r\n  @Input() message = '';\r\n  @Input()\r\n  set type(value: 'success' | 'error' | 'warning' | 'info') {\r\n    if (!['success', 'error', 'warning', 'info'].includes(value)) {\r\n      throw new Error(\r\n        `Invalid type: ${value}. Must be one of 'success', 'error', 'warning', 'info'.`\r\n      );\r\n    }\r\n    this._type = value;\r\n    this.cdr.markForCheck();\r\n  }\r\n  get type(): 'success' | 'error' | 'warning' | 'info' {\r\n    return this._type;\r\n  }\r\n\r\n  @Input() duration = 5000;\r\n  @Input() action: string | null = null;\r\n  @Input() dismissible = false;\r\n  @Input()\r\n  set position(\r\n    value:\r\n      | 'top-left'\r\n      | 'top-center'\r\n      | 'top-right'\r\n      | 'bottom-left'\r\n      | 'bottom-center'\r\n      | 'bottom-right'\r\n  ) {\r\n    if (\r\n      ![\r\n        'top-left',\r\n        'top-center',\r\n        'top-right',\r\n        'bottom-left',\r\n        'bottom-center',\r\n        'bottom-right',\r\n      ].includes(value)\r\n    ) {\r\n      throw new Error(\r\n        `Invalid position: ${value}. Must be one of 'top-left', 'top-center', 'top-right', 'bottom-left', 'bottom-center', 'bottom-right'.`\r\n      );\r\n    }\r\n    this._position = value;\r\n    this.cdr.markForCheck();\r\n  }\r\n  get position():\r\n    | 'top-left'\r\n    | 'top-center'\r\n    | 'top-right'\r\n    | 'bottom-left'\r\n    | 'bottom-center'\r\n    | 'bottom-right' {\r\n    return this._position;\r\n  }\r\n\r\n  @Input() icon: string | null = null;\r\n  @Input()\r\n  set iconColor(value: string | null) {\r\n    this._iconColor = value;\r\n    this.cdr.detectChanges(); // Force change detection\r\n  }\r\n  get iconColor(): string | null {\r\n    return this._iconColor;\r\n  }\r\n\r\n  @Input()\r\n  set customClass(value: string | null) {\r\n    this._customClass = value;\r\n    this.cdr.detectChanges(); // Force change detection\r\n  }\r\n  get customClass(): string | null {\r\n    return this._customClass;\r\n  }\r\n\r\n  @Input() animation: 'fade' | 'slide' = 'fade';\r\n  @Input() actionTemplate: TemplateRef<unknown> | null = null;\r\n  @Input() bypassDuplicateCheck = false;\r\n\r\n  @Output() actionClicked = new EventEmitter<void>();\r\n  @Output() closed = new EventEmitter<void>();\r\n\r\n  isVisible = true;\r\n  offset = 0;\r\n  private timer: ReturnType<typeof setTimeout> | null = null;\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    if (!this.bypassDuplicateCheck) {\r\n      const duplicate = AlertComponent.activeAlerts.find(\r\n        (alert) =>\r\n          alert.message === this.message && alert.position === this.position\r\n      );\r\n      if (duplicate) {\r\n        this.isVisible = false;\r\n        this.cdr.markForCheck();\r\n        return;\r\n      }\r\n    }\r\n\r\n    AlertComponent.activeAlerts.push(this);\r\n    this.updatePositions();\r\n    if (this.duration > 0) {\r\n      this.startTimer();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    const index = AlertComponent.activeAlerts.indexOf(this);\r\n    if (index !== -1) {\r\n      AlertComponent.activeAlerts.splice(index, 1);\r\n      this.updatePositions();\r\n    }\r\n    this.clearTimer();\r\n  }\r\n\r\n  getClasses(): string[] {\r\n    const classes: string[] = [];\r\n\r\n    switch (this.type) {\r\n      case 'success':\r\n        classes.push(\r\n          'bg-green-100 border-green-500 text-green-800 dark:bg-green-900 dark:border-green-600 dark:text-green-200'\r\n        );\r\n        break;\r\n      case 'error':\r\n        classes.push(\r\n          'bg-red-100 border-red-500 text-red-800 dark:bg-red-900 dark:border-red-600 dark:text-red-200'\r\n        );\r\n        break;\r\n      case 'warning':\r\n        classes.push(\r\n          'bg-yellow-100 border-yellow-500 text-yellow-800 dark:bg-yellow-900 dark:border-yellow-600 dark:text-yellow-200'\r\n        );\r\n        break;\r\n      case 'info':\r\n        classes.push(\r\n          'bg-blue-100 border-blue-500 text-blue-800 dark:bg-blue-900 dark:border-blue-600 dark:text-blue-200'\r\n        );\r\n        break;\r\n    }\r\n\r\n    if (this.position === 'top-left' || this.position === 'bottom-left') {\r\n      classes.push('left-4');\r\n    } else if (\r\n      this.position === 'top-center' ||\r\n      this.position === 'bottom-center'\r\n    ) {\r\n      classes.push('left-1/2', '-translate-x-1/2');\r\n    } else if (\r\n      this.position === 'top-right' ||\r\n      this.position === 'bottom-right'\r\n    ) {\r\n      classes.push('right-4');\r\n    }\r\n\r\n    if (this.customClass) {\r\n      classes.push(this.customClass);\r\n    }\r\n\r\n    return classes;\r\n  }\r\n\r\n  getIcon(): string {\r\n    if (this.icon) {\r\n      return this.icon;\r\n    }\r\n    switch (this.type) {\r\n      case 'success':\r\n        return 'check_circle';\r\n      case 'error':\r\n        return 'error';\r\n      case 'warning':\r\n        return 'warning';\r\n      case 'info':\r\n        return 'info';\r\n      default:\r\n        return 'info';\r\n    }\r\n  }\r\n\r\n  getAnimationParams() {\r\n    const isTop = this.position.includes('top');\r\n    const isLeft = this.position.includes('left');\r\n    const isRight = this.position.includes('right');\r\n    return {\r\n      startTransform: isTop\r\n        ? 'translateY(-100%)'\r\n        : isLeft\r\n        ? 'translateX(-100%)'\r\n        : isRight\r\n        ? 'translateX(100%)'\r\n        : 'translateY(100%)',\r\n      endTransform: 'translateY(0%) translateX(0%)',\r\n    };\r\n  }\r\n\r\n  get ariaLabel(): string {\r\n    return `${this.type} alert: ${this.message}${\r\n      this.action ? ', with action: ' + this.action : ''\r\n    }`;\r\n  }\r\n\r\n  onAction(): void {\r\n    this.actionClicked.emit();\r\n  }\r\n\r\n  close(): void {\r\n    this.isVisible = false;\r\n    this.closed.emit();\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  pauseTimer(): void {\r\n    this.clearTimer();\r\n  }\r\n\r\n  resumeTimer(): void {\r\n    if (this.duration > 0) {\r\n      this.startTimer();\r\n    }\r\n  }\r\n\r\n  private startTimer(): void {\r\n    this.clearTimer();\r\n    this.timer = setTimeout(() => {\r\n      this.close();\r\n    }, this.duration);\r\n  }\r\n\r\n  private clearTimer(): void {\r\n    if (this.timer) {\r\n      clearTimeout(this.timer);\r\n      this.timer = null;\r\n    }\r\n  }\r\n\r\n  private updatePositions(): void {\r\n    const alertsAtPosition = AlertComponent.activeAlerts.filter(\r\n      (alert) => alert.position === this.position && alert.isVisible\r\n    );\r\n    let offset = 0;\r\n    for (const alert of alertsAtPosition) {\r\n      alert.offset = offset;\r\n      offset += 60; // Adjust based on alert height + margin\r\n      alert.cdr.markForCheck();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import url('https://fonts.googleapis.com/icon?family=Material+Icons');\r\n\r\n.material-icons {\r\n  font-family: 'Material Icons';\r\n  font-size: 18px; /* Matches text-lg in Tailwind */\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  display: inline-block;\r\n  line-height: 1;\r\n  text-transform: none;\r\n  letter-spacing: normal;\r\n  word-wrap: normal;\r\n  white-space: nowrap;\r\n  direction: ltr;\r\n}\r\n\r\n.message {\r\n  max-width: 300px; /* Adjust as needed */\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.material-icons--custom-color {\r\n  color: inherit !important;\r\n}\r\n",
                    "styleUrl": "./alert.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 153,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "type": {
                    "name": "type",
                    "setSignature": {
                        "name": "type",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 72,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "\"success\" | \"error\" | \"warning\" | \"info\"",
                        "line": 81
                    }
                },
                "position": {
                    "name": "position",
                    "setSignature": {
                        "name": "position",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 89,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "position",
                        "type": "",
                        "returnType": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                        "line": 115
                    }
                },
                "iconColor": {
                    "name": "iconColor",
                    "setSignature": {
                        "name": "iconColor",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 127,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "iconColor",
                        "type": "",
                        "returnType": "string | null",
                        "line": 131
                    }
                },
                "customClass": {
                    "name": "customClass",
                    "setSignature": {
                        "name": "customClass",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 136,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "customClass",
                        "type": "",
                        "returnType": "string | null",
                        "line": 140
                    }
                },
                "ariaLabel": {
                    "name": "ariaLabel",
                    "getSignature": {
                        "name": "ariaLabel",
                        "type": "string",
                        "returnType": "string",
                        "line": 267
                    }
                }
            },
            "templateData": "<div\r\n  *ngIf=\"isVisible\"\r\n  class=\"alert fixed z-50 p-4 rounded-lg shadow-lg flex justify-between items-center max-w-md mx-auto bg-gray-100 border border-gray-300 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-200\"\r\n  [ngClass]=\"getClasses()\"\r\n  [style.top]=\"position.includes('top') ? 4 + offset + 'px' : null\"\r\n  [style.bottom]=\"position.includes('bottom') ? 4 + offset + 'px' : null\"\r\n  role=\"alert\"\r\n  aria-live=\"polite\"\r\n  [attr.aria-label]=\"ariaLabel\"\r\n  [@fadeInOut]=\"animation === 'fade' ? { value: '' } : null\"\r\n  [@slideInOut]=\"\r\n    animation === 'slide' ? { value: '', params: getAnimationParams() } : null\r\n  \"\r\n  (mouseenter)=\"pauseTimer()\"\r\n  (mouseleave)=\"resumeTimer()\"\r\n>\r\n  <div class=\"flex items-center space-x-2\">\r\n    <span\r\n      class=\"material-icons text-lg\"\r\n      [ngClass]=\"\r\n        iconColor\r\n          ? 'material-icons--custom-color ' + iconColor\r\n          : type === 'success'\r\n          ? 'text-green-600 dark:text-green-400'\r\n          : type === 'error'\r\n          ? 'text-red-600 dark:text-red-400'\r\n          : type === 'warning'\r\n          ? 'text-yellow-600 dark:text-yellow-400'\r\n          : 'text-blue-600 dark:text-blue-400'\r\n      \"\r\n    >\r\n      {{ getIcon() }}\r\n    </span>\r\n    <span class=\"message\">{{ message }}</span>\r\n  </div>\r\n  <div class=\"flex space-x-2\">\r\n    <ng-container *ngIf=\"action\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"actionTemplate || defaultActionTemplate\"\r\n      ></ng-container>\r\n    </ng-container>\r\n    <button\r\n      *ngIf=\"dismissible\"\r\n      (click)=\"close()\"\r\n      (keydown.enter)=\"close()\"\r\n      (keydown.space)=\"close()\"\r\n      class=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 focus:outline-none text-xl\"\r\n      aria-label=\"Close alert\"\r\n      tabindex=\"0\"\r\n    >\r\n      ✕\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #defaultActionTemplate>\r\n  <button\r\n    (click)=\"onAction()\"\r\n    (keydown.enter)=\"onAction()\"\r\n    (keydown.space)=\"onAction()\"\r\n    class=\"text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 focus:outline-none underline\"\r\n    [attr.aria-label]=\"action + ' action'\"\r\n    tabindex=\"0\"\r\n  >\r\n    {{ action }}\r\n  </button>\r\n</ng-template>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-7b549b2939b9a34abd922e3a0255997fdcdc44e13e0d3149f6f081fd94e8328dfcef16d4b504efc25d22156e814a32fd37682ce25460fb63fbe9f89259f6c17c",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"primary\" | \"accent\" | \"outline\" | \"text\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, HostBinding } from '@angular/core';\n\n@Component({\n  selector: 'lib-button',\n  standalone: true,\n  templateUrl: './button.component.html',\n  styles: [], // No inline styles; Tailwind handles it\n})\nexport class ButtonComponent {\n  @Input() variant: 'primary' | 'accent' | 'outline' | 'text' = 'primary';\n  @Input() disabled = false;\n  @Input() class = ''; // Allow users to pass custom Tailwind classes\n\n  @HostBinding('class') get hostClasses() {\n    const baseClasses =\n      'inline-flex items-center justify-center px-4 py-2 rounded-md font-medium transition-colors duration-200';\n    const variantClasses = {\n      primary:\n        'bg-blue-600 text-white hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',\n      accent:\n        'bg-purple-600 text-white hover:bg-purple-700 focus:ring-2 focus:ring-purple-500 focus:ring-offset-2',\n      outline:\n        'border border-gray-300 text-gray-700 hover:bg-gray-100 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2',\n      text: 'text-gray-700 hover:bg-gray-100 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2',\n    };\n    const disabledClasses = this.disabled\n      ? 'opacity-50 cursor-not-allowed'\n      : '';\n\n    return `${baseClasses} ${variantClasses[this.variant]} ${disabledClasses} ${\n      this.class\n    }`.trim();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "hostClasses": {
                    "name": "hostClasses",
                    "getSignature": {
                        "name": "hostClasses",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                }
            },
            "templateData": "<button [disabled]=\"disabled\">\n  <ng-content></ng-content>\n</button>\n"
        },
        {
            "name": "DrawerComponent",
            "id": "component-DrawerComponent-bb732ac0b9a10c30eba1685ab98ef48d5b9d7af3a50960faeeea683235ed313692737bba01e160da820fb2a3ab0e3697f4e2962b87b77f84d5b64a7374351122",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/drawer/drawer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-drawer",
            "styleUrls": [
                "./drawer.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./drawer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "\"persistent\" | \"temporary\" | \"mini\"",
                    "decorators": []
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "'left'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "\"left\" | \"right\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_mode",
                    "defaultValue": "'temporary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"persistent\" | \"temporary\" | \"mini\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTranslationClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onEscape",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.escape', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "openDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "document:keydown.escape",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ChangeDetectionStrategy,\n  HostBinding,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'lib-drawer',\n  templateUrl: './drawer.component.html',\n  styleUrls: ['./drawer.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [CommonModule],\n})\nexport class DrawerComponent {\n  @Input() position: 'left' | 'right' = 'left';\n  @Input()\n  set mode(value: 'persistent' | 'temporary' | 'mini') {\n    this._mode = value;\n    this.cdr.markForCheck(); // Trigger change detection\n  }\n  get mode(): 'persistent' | 'temporary' | 'mini' {\n    return this._mode;\n  }\n  private _mode: 'persistent' | 'temporary' | 'mini' = 'temporary';\n\n  private _open = false;\n\n  @Input()\n  get open(): boolean {\n    return this._open;\n  }\n  set open(value: boolean) {\n    if (this._open !== value) {\n      this._open = value;\n      this.openChange.emit(this._open);\n      this.cdr.markForCheck(); // Trigger change detection\n    }\n  }\n\n  @Output() openChange = new EventEmitter<boolean>();\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  get isClosable(): boolean {\n    return this._mode === 'temporary';\n  }\n\n  get backdrop(): boolean {\n    return this._mode === 'temporary' && this._open;\n  }\n\n  @HostListener('document:keydown.escape', ['$event'])\n  onEscape() {\n    if (this.isClosable) {\n      this.close();\n    }\n  }\n\n  toggle(): void {\n    this.open = !this._open;\n  }\n\n  close(): void {\n    this.open = false;\n  }\n\n  openDrawer(): void {\n    this.open = true;\n  }\n\n  @HostBinding('class')\n  get drawerClasses(): string {\n    return [\n      'fixed',\n      'top-0',\n      this.position === 'left' ? 'left-0' : 'right-0',\n      this.getTranslationClass(),\n      this._mode === 'mini' ? 'w-16' : 'w-64',\n      'h-full',\n      'bg-white',\n      'z-40',\n      'transition-transform',\n      'duration-300',\n      'shadow-lg',\n    ].join(' ');\n  }\n\n  private getTranslationClass(): string {\n    if (this._open) return 'translate-x-0';\n    return this.position === 'left' ? '-translate-x-full' : 'translate-x-full';\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: block;\r\n    color: rgb(129, 126, 133);\r\n  }\r\n  \r\n  .drawer-content {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n  }\r\n  \r\n  .opacity-50 {\r\n    background-color: rgba(180, 28, 28, 0.5);\r\n  }",
                    "styleUrl": "./drawer.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "mode": {
                    "name": "mode",
                    "setSignature": {
                        "name": "mode",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "\"persistent\" | \"temporary\" | \"mini\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "\"persistent\" | \"temporary\" | \"mini\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "mode",
                        "type": "",
                        "returnType": "\"persistent\" | \"temporary\" | \"mini\"",
                        "line": 28
                    }
                },
                "open": {
                    "name": "open",
                    "setSignature": {
                        "name": "open",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "open",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 36
                    }
                },
                "isClosable": {
                    "name": "isClosable",
                    "getSignature": {
                        "name": "isClosable",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 51
                    }
                },
                "backdrop": {
                    "name": "backdrop",
                    "getSignature": {
                        "name": "backdrop",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 55
                    }
                },
                "drawerClasses": {
                    "name": "drawerClasses",
                    "getSignature": {
                        "name": "drawerClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 79
                    }
                }
            },
            "templateData": "<!-- Drawer Container -->\n<div\n  [class]=\"drawerClasses\"\n  [class.hidden]=\"!open\"\n  role=\"dialog\"\n  aria-labelledby=\"drawer-title\"\n  [attr.aria-hidden]=\"!open\"\n>\n  <!-- Drawer Content -->\n  <div class=\"relative flex flex-col h-full bg-white shadow-xl p-4\">\n    <!-- Close Button -->\n    <button\n      *ngIf=\"isClosable\"\n      class=\"absolute top-4 right-4 text-gray-600 hover:text-gray-800\"\n      (click)=\"close()\"\n      aria-label=\"Close Drawer\"\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        class=\"h-6 w-6\"\n        viewBox=\"0 0 20 20\"\n        fill=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          fill-rule=\"evenodd\"\n          d=\"M10 9.293l5.147-5.146a1 1 0 111.414 1.414L11.414 10l5.147 5.146a1 1 0 11-1.414 1.414L10 11.414l-5.146 5.147a1 1 0 11-1.414-1.414L8.586 10 3.439 4.854a1 1 0 111.414-1.414L10 9.293z\"\n          clip-rule=\"evenodd\"\n        />\n      </svg>\n    </button>\n\n    <!-- Custom Content -->\n    <ng-content></ng-content>\n  </div>\n</div>\n\n<!-- Backdrop Overlay -->\n<div\n  *ngIf=\"backdrop\"\n  class=\"fixed inset-0 bg-black bg-opacity-50 z-30\"\n  (click)=\"close()\"\n  [attr.aria-hidden]=\"true\"\n  role=\"button\"\n  tabindex=\"0\"\n></div>"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-f4ffddc67d4dc8cdcc909de572d3660df47682439e6a9f4405942573613c1afc2dac2183ba5b0f69bbb0568ec3eb59ac6e3bfa8c56f5eecf072b8b573f060f08",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-icon",
            "styleUrls": [
                "./icon.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'text-gray-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'home'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "\"sm\" | \"md\" | \"lg\" | \"xl\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'lib-icon',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.css'],\n})\nexport class IconComponent {\n  @Input() name = 'home';\n  @Input() size: 'sm' | 'md' | 'lg' | 'xl' = 'md';\n  @Input() color = 'text-gray-500';\n\n  get sizePx(): number {\n    const sizeMap: Record<string, number> = {\n      sm: 16,\n      md: 24,  // Default Material Icon size\n      lg: 32,\n      xl: 48,\n    };\n    return sizeMap[this.size] || sizeMap['md'];\n  }\n\n  get colorClass(): string {\n    return this.color;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".material-icons {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    vertical-align: middle;\n}",
                    "styleUrl": "./icon.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "sizePx": {
                    "name": "sizePx",
                    "getSignature": {
                        "name": "sizePx",
                        "type": "number",
                        "returnType": "number",
                        "line": 16
                    }
                },
                "colorClass": {
                    "name": "colorClass",
                    "getSignature": {
                        "name": "colorClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 26
                    }
                }
            },
            "templateData": "<span \n  class=\"material-icons\"\n  [ngClass]=\"colorClass\"\n  [style.font-size.px]=\"sizePx\">\n  {{ name }}\n</span>\n"
        },
        {
            "name": "LoadingSpinnerComponent",
            "id": "component-LoadingSpinnerComponent-10509c463c4902342a644ec0f29cb262b6513479ebdd929cfacec37856de1d1ef4beb814f63ac3f69346f425e71fbf1fbe354f8313e1b711ac3f038fe8fd695d",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-loading-spinner",
            "styleUrls": [
                "./loadingSpinner.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./loadingSpinner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'#3b82f6'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "\"determinate\" | \"indeterminate\"",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "thickness",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'lib-loading-spinner',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './loadingSpinner.component.html',\n  styleUrls: ['./loadingSpinner.component.css'],\n})\nexport class LoadingSpinnerComponent {\n  @Input() mode: 'determinate' | 'indeterminate' = 'indeterminate'; // Loading state\n  @Input() value = 0; // Progress value (0-100) for determinate mode\n  @Input() size = 40; // Diameter in pixels\n  @Input() thickness = 4; // Stroke width in pixels\n  @Input() color = '#3b82f6'; // Default Tailwind blue-500\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n\nsvg {\n  display: block;\n}\n",
                    "styleUrl": "./loadingSpinner.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div\n  class=\"relative inline-block\"\n  [style.width.px]=\"size\"\n  [style.height.px]=\"size\"\n  role=\"progressbar\"\n  [attr.aria-valuenow]=\"mode === 'determinate' ? value : null\"\n  [attr.aria-valuemin]=\"0\"\n  [attr.aria-valuemax]=\"100\"\n  [attr.aria-label]=\"mode === 'determinate' ? 'Loading progress' : 'Loading'\"\n>\n  <!-- Indeterminate Spinner -->\n  <svg\n    *ngIf=\"mode === 'indeterminate'\"\n    class=\"animate-spin\"\n    [style.width.px]=\"size\"\n    [style.height.px]=\"size\"\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle\n      class=\"opacity-25\"\n      cx=\"50\"\n      cy=\"50\"\n      r=\"40\"\n      [style.stroke]=\"color\"\n      [style.stroke-width]=\"thickness\"\n      fill=\"none\"\n    />\n    <circle\n      cx=\"50\"\n      cy=\"50\"\n      r=\"40\"\n      [style.stroke]=\"color\"\n      [style.stroke-width]=\"thickness\"\n      fill=\"none\"\n      stroke-linecap=\"round\"\n      stroke-dasharray=\"251.2\"\n      stroke-dashoffset=\"62.8\"\n    />\n  </svg>\n\n  <!-- Determinate Spinner -->\n  <svg\n    *ngIf=\"mode === 'determinate'\"\n    [style.width.px]=\"size\"\n    [style.height.px]=\"size\"\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle\n      class=\"opacity-25\"\n      cx=\"50\"\n      cy=\"50\"\n      r=\"40\"\n      [style.stroke]=\"color\"\n      [style.stroke-width]=\"thickness\"\n      fill=\"none\"\n    />\n    <circle\n      class=\"transition-all duration-300 ease-in-out\"\n      cx=\"50\"\n      cy=\"50\"\n      r=\"40\"\n      [style.stroke]=\"color\"\n      [style.stroke-width]=\"thickness\"\n      fill=\"none\"\n      stroke-linecap=\"round\"\n      [style.stroke-dasharray]=\"251.2\"\n      [style.stroke-dashoffset]=\"251.2 - 251.2 * (value / 100)\"\n    />\n  </svg>\n</div>\n"
        },
        {
            "name": "PaginatorComponent",
            "id": "component-PaginatorComponent-1fb3bb93af7f13625b403ab0e2e05642b5aec29b96c7e71e6542a29cfbd4095e3b2ed2f1be3be82e3ab53ba30d53b56fd48871308a8c9c6149074034d7330bd0",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/paginator/paginator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-paginator",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./paginator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "length",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageSize",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                },
                {
                    "name": "pageSizeChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "pageSizeOptions",
                    "defaultValue": "[10, 20, 50, 100]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "newIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changePageSize",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'lib-paginator',\n  imports: [CommonModule],\n  templateUrl: './paginator.component.html',\n})\nexport class PaginatorComponent {\n  @Input() length = 100; // Total items\n  @Input() pageSize = 10; // Items per page\n  @Input() pageIndex = 0; // Current page\n  @Output() pageChange = new EventEmitter<number>();\n  @Output() pageSizeChange = new EventEmitter<number>();\n\n  pageSizeOptions = [10, 20, 50, 100];\n\n  @HostBinding('class') get hostClasses() {\n    return 'flex justify-between items-center p-4 bg-gray-100 rounded-lg shadow-sm w-full';\n  }\n\n  get totalPages(): number {\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n  get isFirstPage(): boolean {\n    return this.pageIndex === 0;\n  }\n\n  get isLastPage(): boolean {\n    return this.pageIndex === this.totalPages - 1;\n  }\n\n  get startItem(): number {\n    return this.pageIndex * this.pageSize + 1;\n  }\n\n  get endItem(): number {\n    return Math.min((this.pageIndex + 1) * this.pageSize, this.length);\n  }\n\n  changePage(newIndex: number) {\n    if (newIndex >= 0 && newIndex < this.totalPages) {\n      this.pageIndex = newIndex;\n      this.pageChange.emit(this.pageIndex);\n    }\n  }\n\n  changePageSize(event: Event) {\n    const newSize = Number((event.target as HTMLSelectElement).value);\n    this.pageSize = newSize;\n    this.pageIndex = 0; // Reset to first page\n    this.pageSizeChange.emit(this.pageSize);\n    this.pageChange.emit(this.pageIndex);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "hostClasses": {
                    "name": "hostClasses",
                    "getSignature": {
                        "name": "hostClasses",
                        "type": "",
                        "returnType": "",
                        "line": 18
                    }
                },
                "totalPages": {
                    "name": "totalPages",
                    "getSignature": {
                        "name": "totalPages",
                        "type": "number",
                        "returnType": "number",
                        "line": 22
                    }
                },
                "isFirstPage": {
                    "name": "isFirstPage",
                    "getSignature": {
                        "name": "isFirstPage",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 26
                    }
                },
                "isLastPage": {
                    "name": "isLastPage",
                    "getSignature": {
                        "name": "isLastPage",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 30
                    }
                },
                "startItem": {
                    "name": "startItem",
                    "getSignature": {
                        "name": "startItem",
                        "type": "number",
                        "returnType": "number",
                        "line": 34
                    }
                },
                "endItem": {
                    "name": "endItem",
                    "getSignature": {
                        "name": "endItem",
                        "type": "number",
                        "returnType": "number",
                        "line": 38
                    }
                }
            },
            "templateData": "<!-- Page Size Selector -->\n<div class=\"flex items-center space-x-2\">\n  <label for=\"pageSizeSelect\" class=\"text-gray-600 text-sm\">Items per page:</label>\n  <select \n    id=\"pageSizeSelect\"\n    [value]=\"pageSize\"\n    (change)=\"changePageSize($event)\"\n    class=\"border border-gray-300 rounded-md px-2 py-2 bg-white text-gray-700\">\n    <option *ngFor=\"let size of pageSizeOptions\" [value]=\"size\">{{ size }}</option>\n  </select>\n</div>\n\n<!-- Page Information -->\n<span class=\"text-gray-500 text-sm\">\n  {{ startItem }} – {{ endItem }} of {{ length }}\n</span>\n\n<!-- Navigation Controls -->\n<button \n  [disabled]=\"isFirstPage\"\n  (click)=\"changePage(pageIndex - 1)\"\n  class=\"p-2 text-gray-500 hover:text-black disabled:opacity-50\">\n  ❮\n</button>\n\n<button \n  [disabled]=\"isLastPage\"\n  (click)=\"changePage(pageIndex + 1)\"\n  class=\"p-2 text-gray-500 hover:text-black disabled:opacity-50\">\n  ❯\n</button>\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-7d8a8dfd44a8cfebe1879bdfbcc8957089d0d26cfee79d6f7748440be200c61047da266a2203c71c427ad422483a890436b6d3cb771694e1537c50fa2c6d8bec",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-progress-bar",
            "styleUrls": [
                "./progress-bar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "bufferProgress",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBuffer progress (for buffer variant, 0-100)",
                    "description": "<p>Buffer progress (for buffer variant, 0-100)</p>\n",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nColor options",
                    "description": "<p>Color options</p>\n",
                    "line": 21,
                    "type": "\"primary\" | \"secondary\" | \"success\" | \"error\"",
                    "decorators": []
                },
                {
                    "name": "progress",
                    "defaultValue": "80",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nPrimary progress percentage (0-100)",
                    "description": "<p>Primary progress percentage (0-100)</p>\n",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'determinate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTypes: 'determinate' | 'indeterminate' | 'buffer' | 'query'",
                    "description": "<p>Types: &#39;determinate&#39; | &#39;indeterminate&#39; | &#39;buffer&#39; | &#39;query&#39;</p>\n",
                    "line": 12,
                    "type": "\"determinate\" | \"indeterminate\" | \"buffer\" | \"query\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colorMap",
                    "defaultValue": "{\n    primary: 'bg-blue-500', // Default\n    secondary: 'bg-yellow-500',\n    success: 'bg-green-500',\n    error: 'bg-red-500', // Warning\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMap color variants to Tailwind CSS classes",
                    "description": "<p>Map color variants to Tailwind CSS classes</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, HostBinding, Input } from '@angular/core';\n\n@Component({\n  selector: 'lib-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.css'],\n  imports: [CommonModule],\n})\nexport class ProgressBarComponent {\n  /** Types: 'determinate' | 'indeterminate' | 'buffer' | 'query' */\n  @Input() variant: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Primary progress percentage (0-100) */\n  @Input() progress = 80;\n\n  /** Buffer progress (for buffer variant, 0-100) */\n  @Input() bufferProgress = 100;\n\n  /** Color options */\n  @Input() color: 'primary' | 'secondary' | 'success' | 'error' = 'primary';\n\n  @Input() class = ''; // Allow users to pass custom Tailwind classes\n\n  \n\n  private readonly colorMap = {\n    primary: 'bg-blue-500', // Default\n    secondary: 'bg-yellow-500',\n    success: 'bg-green-500',\n    error: 'bg-red-500', // Warning\n  };\n\n  /** Map color variants to Tailwind CSS classes */\n  @HostBinding('class')\n  get progressBarClass(): string {\n    return this.colorMap[this.color] || 'bg-blue-500';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@keyframes indeterminate {\r\n    0% {\r\n      left: -100%;\r\n    }\r\n    100% {\r\n      left: 100%;\r\n    }\r\n  }\r\n  \r\n  @keyframes query {\r\n    0% {\r\n      right: -100%;\r\n    }\r\n    100% {\r\n      right: 100%;\r\n    }\r\n  }\r\n\r\n  @keyframes bufferWave {\r\n    0% {\r\n      left: -100%;\r\n      width: 40%;\r\n    }\r\n    50% {\r\n      left: 50%;\r\n      width: 60%;\r\n    }\r\n    100% {\r\n      left: 100%;\r\n      width: 40%;\r\n    }\r\n  }\r\n  \r\n  .animate-indeterminate {\r\n    position: absolute;\r\n    left: -100%;\r\n    width: 40%;\r\n    animation: indeterminate 1.5s infinite linear;\r\n  }\r\n  \r\n  .animate-query {\r\n    position: absolute;\r\n    right: -100%;\r\n    width: 40%;\r\n    animation: query 1.5s infinite linear;\r\n  }\r\n\r\n  .buffer-wave {\r\n    position: absolute;\r\n    left: -100%;\r\n    height: 100%;\r\n    width: 40%;\r\n    background: linear-gradient(to right, rgba(0, 0, 0, 0.1), rgba(255, 255, 255, 0.3));\r\n    animation: bufferWave 2s infinite ease-in-out;\r\n  }\r\n\r\n  \r\n  ",
                    "styleUrl": "./progress-bar.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "progressBarClass": {
                    "name": "progressBarClass",
                    "getSignature": {
                        "name": "progressBarClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 36,
                        "rawdescription": "\nMap color variants to Tailwind CSS classes",
                        "description": "<p>Map color variants to Tailwind CSS classes</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"w-full bg-gray-200 rounded-full h-4 overflow-hidden relative\">\n\n  <!-- Determinate & Buffer Primary Progress -->\n  <div\n    *ngIf=\"variant === 'determinate' || variant === 'buffer'\"\n    class=\"h-full transition-all duration-300\"\n    [ngClass]=\"progressBarClass\"\n    [style.width.%]=\"progress\"\n    role=\"progressbar\"\n    [attr.aria-valuenow]=\"progress\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n  ></div>\n\n  <!-- Indeterminate Animation -->\n  <div\n    *ngIf=\"variant === 'indeterminate'\"\n    class=\"absolute top-0 left-0 h-full w-full overflow-hidden\"\n  >\n    <div\n      class=\"h-full w-1/3 animate-indeterminate\"\n      [ngClass]=\"progressBarClass\"\n    ></div>\n  </div>\n\n  <!-- Query Mode (Reversed Indeterminate) -->\n  <div\n    *ngIf=\"variant === 'query'\"\n    class=\"absolute top-0 left-0 h-full w-full overflow-hidden\"\n  >\n    <div\n      class=\"h-full w-1/3 animate-query\"\n      [ngClass]=\"progressBarClass\"\n    ></div>\n  </div>\n\n  <!-- Buffer Secondary Progress -->\n  <!-- Buffer Secondary Progress Background -->\n<div\n*ngIf=\"variant === 'buffer'\"\nclass=\"absolute top-0 left-0 h-full bg-gray-300 opacity-50\"\n[style.width.%]=\"bufferProgress\"\n></div>\n\n<!-- Buffer Animation Overlay -->\n<div\n*ngIf=\"variant === 'buffer'\"\nclass=\"absolute top-0 left-0 h-full w-full overflow-hidden\"\n>\n<div class=\"buffer-wave\"></div>\n</div>\n\n\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "Accent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'accent',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Accent Button</lib-button>`,\n  }),\n}"
            },
            {
                "name": "BasicSnackBar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    message: 'Disco party!',\r\n    type: 'info',\r\n    action: 'Dance',\r\n    duration: 5000,\r\n    position: 'bottom-center',\r\n  },\r\n}"
            },
            {
                "name": "Colored",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    color: '#ef4444', // Tailwind red-500\n  },\n}"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/.storybook/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StorybookConfig",
                "defaultValue": "{\n  stories: ['../**/*.@(mdx|stories.@(js|jsx|ts|tsx))'],\n  addons: ['@storybook/addon-essentials', '@storybook/addon-interactions'],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n  docs: {\n    autodocs: true,\n    defaultName: 'Docs',\n  },\n}"
            },
            {
                "name": "ConfigurablePosition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    message: 'Pool party!',\r\n    type: 'info',\r\n    duration: 5000,\r\n    position: 'bottom-right',\r\n  },\r\n}"
            },
            {
                "name": "CustomStyled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'primary',\n    class: 'text-lg px-6 py-3 bg-green-500 hover:bg-green-600',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [class]=\"class\">Custom Styled Button</lib-button>`,\n  }),\n}"
            },
            {
                "name": "CustomStyled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    progress: 60,\n    color: 'primary',\n    variant: 'determinate',\n    class: 'h-6 rounded-lg',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [color]=\"color\" [variant]=\"variant\" [class]=\"class\"></lib-progress-bar>`,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/drawer/drawer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'home',\n    size: 'md',\n    color: 'text-gray-500',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-icon [name]=\"name\" [size]=\"size\" [color]=\"color\"></lib-icon>`,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/paginator/paginator.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<PaginatorComponent>",
                "defaultValue": "{\r\n  args: {\r\n    length: 100,\r\n    pageSize: 10,\r\n    pageIndex: 0,\r\n  },\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    progress: 25,\n    color: \"primary\",\n    variant: 'determinate',\n    bufferProgress: 0\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
            },
            {
                "name": "Determinate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    mode: 'determinate',\n    value: 50,\n  },\n}"
            },
            {
                "name": "DeterminateProgress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    mode: 'determinate',\n    value: 75,\n    size: 50,\n    thickness: 5,\n    color: '#10b981', // Tailwind green-500\n  },\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'primary',\n    disabled: true,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Disabled Button</lib-button>`,\n  }),\n}"
            },
            {
                "name": "DismissibleError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    message: 'Something went wrong',\r\n    type: 'error',\r\n    dismissible: true,\r\n    duration: 0,\r\n    position: 'top-right',\r\n  },\r\n}"
            },
            {
                "name": "GreenBuffer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    progress: 40,\n    bufferProgress: 5,\n    color: 'success',\n    variant: 'buffer',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [buffer]=\"buffer\" [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
            },
            {
                "name": "GreenProgress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    progress: 70,\n    color: 'success',\n    variant: 'determinate',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 60,\n  },\n}"
            },
            {
                "name": "LargeRedIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'favorite',\n    size: 'xl',\n    color: 'text-red-500',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-icon [name]=\"name\" [size]=\"size\" [color]=\"color\"></lib-icon>`,\n  }),\n}"
            },
            {
                "name": "link",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "document.createElement('link')"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AlertComponent>",
                "defaultValue": "{\r\n  title: 'Components/Alert',\r\n  component: AlertComponent,\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [provideAnimations()],\r\n    }),\r\n  ],\r\n  args: {},\r\n  argTypes: {\r\n    message: { control: 'text' },\r\n    type: {\r\n      control: 'select',\r\n      options: ['success', 'warning', 'error', 'info'],\r\n    },\r\n    duration: { control: 'number' },\r\n    action: { control: 'text' },\r\n    dismissible: { control: 'boolean' },\r\n    position: {\r\n      control: 'select',\r\n      options: [\r\n        'top-left',\r\n        'top-center',\r\n        'top-right',\r\n        'bottom-left',\r\n        'bottom-center',\r\n        'bottom-right',\r\n      ],\r\n    },\r\n    icon: {\r\n      control: 'select',\r\n      options: [\r\n        '',\r\n        'pizza',\r\n        'mood',\r\n        'star',\r\n        'favorite',\r\n        'thumb_up',\r\n        'lightbulb',\r\n        'coffee',\r\n        'cloud',\r\n        'music_note',\r\n        'pets',\r\n        'rocket',\r\n        'beach_access',\r\n      ],\r\n    },\r\n    animation: { control: 'select', options: ['fade', 'slide'] },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  title: 'Components/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['primary', 'accent', 'outline', 'text'],\n      description: 'Button style variant',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Disables the button',\n    },\n    class: {\n      control: 'text',\n      description: 'Additional Tailwind CSS classes for customization',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<IconComponent>",
                "defaultValue": "{\n  title: 'Components/Icon',\n  component: IconComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    name: { control: 'text', description: 'Icon name from Material Icons' },\n    size: { \n      control: 'radio', \n      options: ['sm', 'md', 'lg', 'xl'], \n      description: 'Size of the icon' \n    },\n    color: { control: 'text', description: 'Tailwind color classes' },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<LoadingSpinnerComponent>",
                "defaultValue": "{\n  title: 'Components/LoadingSpinnerComponent',\n  component: LoadingSpinnerComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    mode: {\n      control: 'select',\n      options: ['determinate', 'indeterminate'],\n      description: 'Loading state',\n    },\n    value: {\n      control: 'number',\n      description: 'Progress value (0-100) for determinate mode',\n    },\n    size: { control: 'number', description: 'Diameter in pixels' },\n    thickness: { control: 'number', description: 'Stroke width in pixels' },\n    color: {\n      control: 'color',\n      description: 'Spinner color (hex or Tailwind color)',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ProgressBarComponent>",
                "defaultValue": "{\n  title: 'Components/Progress Bar',\n  component: ProgressBarComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    progress: {\n      control: { type: 'range', min: 0, max: 100, step: 1 },\n      description: 'Progress percentage (0 to 100)',\n    },\n    // buffer: {\n    //   control: { type: 'range', min: 0, max: 100, step: 1 },\n    //   description: 'Buffer progress percentage (used in buffer variant)',\n    // },\n    color: {\n      control: 'select',\n      options: ['primary', 'secondary', 'success', 'error'],\n      description: 'Color of the progress bar',\n    },\n    variant: {\n      control: 'select',\n      options: ['determinate', 'indeterminate', 'buffer', 'query'],\n      description: 'Progress bar type',\n    },\n    // class: {\n    //   control: 'text',\n    //   description: 'Additional Tailwind CSS classes for customization',\n    // },\n  },\n}"
            },
            {
                "name": "Outline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'outline',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Outline Button</lib-button>`,\n  }),\n}"
            },
            {
                "name": "parameters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  actions: { argTypesRegex: '^on[A-Z].*' },\n  controls: {\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/,\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'primary',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Primary Button</lib-button>`,\n  }),\n}"
            },
            {
                "name": "RedIndeterminate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    color: 'error',\n    variant: 'indeterminate',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
            },
            {
                "name": "RightMini",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/drawer/drawer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SmallBlueIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'star',\n    size: 'sm',\n    color: 'text-blue-500',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-icon [name]=\"name\" [size]=\"size\" [color]=\"color\"></lib-icon>`,\n  }),\n}"
            },
            {
                "name": "StackedAlerts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<>",
                "defaultValue": "{\r\n  render: (args: StackedAlertsArgs) => ({\r\n    props: args,\r\n    template: `\r\n      <lib-alert\r\n        [message]=\"firstMessage\"\r\n        [type]=\"firstType\"\r\n        [action]=\"firstAction\"\r\n        [dismissible]=\"firstDismissible\"\r\n        [icon]=\"firstIcon\"\r\n        [duration]=\"firstDuration\"\r\n        [animation]=\"firstAnimation\"\r\n        [position]=\"firstPosition\"\r\n        [bypassDuplicateCheck]=\"true\"\r\n      ></lib-alert>\r\n      <lib-alert\r\n        [message]=\"secondMessage\"\r\n        [type]=\"secondType\"\r\n        [action]=\"secondAction\"\r\n        [dismissible]=\"secondDismissible\"\r\n        [icon]=\"secondIcon\"\r\n        [duration]=\"secondDuration\"\r\n        [animation]=\"secondAnimation\"\r\n        [position]=\"secondPosition\"\r\n        [bypassDuplicateCheck]=\"true\"\r\n      ></lib-alert>\r\n      <lib-alert\r\n        [message]=\"thirdMessage\"\r\n        [type]=\"thirdType\"\r\n        [action]=\"thirdAction\"\r\n        [dismissible]=\"thirdDismissible\"\r\n        [icon]=\"thirdIcon\"\r\n        [duration]=\"thirdDuration\"\r\n        [animation]=\"thirdAnimation\"\r\n        [position]=\"thirdPosition\"\r\n        [bypassDuplicateCheck]=\"true\"\r\n      ></lib-alert>\r\n    `,\r\n  }),\r\n  args: {\r\n    firstMessage: 'First alert',\r\n    firstType: 'success',\r\n    firstAction: null,\r\n    firstDismissible: true,\r\n    firstIcon: 'star',\r\n    firstDuration: 50000,\r\n    firstAnimation: 'slide',\r\n    firstPosition: 'top-right',\r\n\r\n    secondMessage: 'Second alert',\r\n    secondType: 'warning',\r\n    secondAction: null,\r\n    secondDismissible: true,\r\n    secondIcon: null,\r\n    secondDuration: 50000,\r\n    secondAnimation: 'slide',\r\n    secondPosition: 'top-right',\r\n\r\n    thirdMessage: 'Third alert',\r\n    thirdType: 'error',\r\n    thirdAction: null,\r\n    thirdDismissible: true,\r\n    thirdIcon: null,\r\n    thirdDuration: 50000,\r\n    thirdAnimation: 'slide',\r\n    thirdPosition: 'top-right',\r\n  } as StackedAlertsArgs,\r\n  argTypes: {\r\n    // First Alert Controls\r\n    firstMessage: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'First Alert Message',\r\n    },\r\n    firstType: {\r\n      control: 'select',\r\n      options: ['success', 'error', 'warning', 'info'],\r\n      name: 'First Alert Type',\r\n    },\r\n    firstAction: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'First Alert Action',\r\n    },\r\n    firstDismissible: { control: 'boolean', name: 'First Alert Dismissible' },\r\n    firstIcon: {\r\n      control: 'select',\r\n      options: [\r\n        '',\r\n        'pizza',\r\n        'mood',\r\n        'star',\r\n        'favorite',\r\n        'thumb_up',\r\n        'lightbulb',\r\n        'coffee',\r\n        'cloud',\r\n        'music_note',\r\n        'pets',\r\n        'rocket',\r\n        'beach_access',\r\n      ],\r\n      name: 'First Alert Icon',\r\n    },\r\n    firstDuration: { control: 'number', name: 'First Alert Duration' },\r\n    firstAnimation: {\r\n      control: 'select',\r\n      options: ['fade', 'slide'],\r\n      name: 'First Alert Animation',\r\n    },\r\n    firstPosition: {\r\n      control: 'select',\r\n      options: [\r\n        'top-left',\r\n        'top-center',\r\n        'top-right',\r\n        'bottom-left',\r\n        'bottom-center',\r\n        'bottom-right',\r\n      ],\r\n      name: 'First Alert Position',\r\n    },\r\n\r\n    // Second Alert Controls\r\n    secondMessage: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'Second Alert Message',\r\n    },\r\n    secondType: {\r\n      control: 'select',\r\n      options: ['success', 'error', 'warning', 'info'],\r\n      name: 'Second Alert Type',\r\n    },\r\n    secondAction: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'Second Alert Action',\r\n    },\r\n    secondDismissible: { control: 'boolean', name: 'Second Alert Dismissible' },\r\n    secondIcon: {\r\n      control: 'select',\r\n      options: [\r\n        '',\r\n        'pizza',\r\n        'mood',\r\n        'star',\r\n        'favorite',\r\n        'thumb_up',\r\n        'lightbulb',\r\n        'coffee',\r\n        'cloud',\r\n        'music_note',\r\n        'pets',\r\n        'rocket',\r\n        'beach_access',\r\n      ],\r\n      name: 'Second Alert Icon',\r\n    },\r\n    secondDuration: { control: 'number', name: 'Second Alert Duration' },\r\n    secondAnimation: {\r\n      control: 'select',\r\n      options: ['fade', 'slide'],\r\n      name: 'Second Alert Animation',\r\n    },\r\n    secondPosition: {\r\n      control: 'select',\r\n      options: [\r\n        'top-left',\r\n        'top-center',\r\n        'top-right',\r\n        'bottom-left',\r\n        'bottom-center',\r\n        'bottom-right',\r\n      ],\r\n      name: 'Second Alert Position',\r\n    },\r\n\r\n    // Third Alert Controls\r\n    thirdMessage: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'Third Alert Message',\r\n    },\r\n    thirdType: {\r\n      control: 'select',\r\n      options: ['success', 'error', 'warning', 'info'],\r\n      name: 'Third Alert Type',\r\n    },\r\n    thirdAction: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'Third Alert Action',\r\n    },\r\n    thirdDismissible: { control: 'boolean', name: 'Third Alert Dismissible' },\r\n    thirdIcon: {\r\n      control: 'select',\r\n      options: [\r\n        '',\r\n        'pizza',\r\n        'mood',\r\n        'star',\r\n        'favorite',\r\n        'thumb_up',\r\n        'lightbulb',\r\n        'coffee',\r\n        'cloud',\r\n        'music_note',\r\n        'pets',\r\n        'rocket',\r\n        'beach_access',\r\n      ],\r\n      name: 'Third Alert Icon',\r\n    },\r\n    thirdDuration: { control: 'number', name: 'Third Alert Duration' },\r\n    thirdAnimation: {\r\n      control: 'select',\r\n      options: ['fade', 'slide'],\r\n      name: 'Third Alert Animation',\r\n    },\r\n    thirdPosition: {\r\n      control: 'select',\r\n      options: [\r\n        'top-left',\r\n        'top-center',\r\n        'top-right',\r\n        'bottom-left',\r\n        'bottom-center',\r\n        'bottom-right',\r\n      ],\r\n      name: 'Third Alert Position',\r\n    },\r\n\r\n    // Remove inherited fields that are not used in this story\r\n    message: { table: { disable: true } },\r\n    type: { table: { disable: true } },\r\n    duration: { table: { disable: true } },\r\n    action: { table: { disable: true } },\r\n    dismissible: { table: { disable: true } },\r\n    position: { table: { disable: true } },\r\n    icon: { table: { disable: true } },\r\n    animation: { table: { disable: true } },\r\n  },\r\n}"
            },
            {
                "name": "SuccessWithAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    message: 'Data saved successfully',\r\n    type: 'success',\r\n    action: 'Undo',\r\n    duration: 3000,\r\n    position: 'bottom-center',\r\n  },\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/drawer/drawer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<DrawerComponent>",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    handleToggle: () => {\r\n      args.open = !args.open;\r\n      args.openChange(args.open); // manually emit for Storybook\r\n    },\r\n  },\r\n  template: `\r\n    <lib-drawer [mode]=\"mode\" [position]=\"position\" [open]=\"open\" (openChange)=\"openChange($event)\">\r\n      <div drawerContent class=\"h-full p-4 bg-blue-100\">\r\n        <p class=\"font-semibold\">Drawer content ({{ mode }} | {{ position }})</p>\r\n      </div>\r\n      <div mainContent class=\"p-4\">\r\n        <p>Main content area</p>\r\n        <button\r\n          *ngIf=\"mode === 'temporary'\"\r\n          (click)=\"handleToggle()\"\r\n          class=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded\"\r\n        >\r\n          Toggle Drawer\r\n        </button>\r\n      </div>\r\n    </lib-drawer>\r\n  `,\r\n})"
            },
            {
                "name": "Temporary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/drawer/drawer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Text",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'text',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Text Button</lib-button>`,\n  }),\n}"
            },
            {
                "name": "Thick",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    thickness: 6,\n  },\n}"
            },
            {
                "name": "WarningWithCustomIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    message: 'Custom icon alert',\r\n    type: 'warning',\r\n    icon: 'star',\r\n    dismissible: true,\r\n    duration: 5000,\r\n    position: 'top-center',\r\n  },\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AlertComponent>",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<IconComponent>",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LoadingSpinnerComponent>",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ProgressBarComponent>",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts": [
                {
                    "name": "Accent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'accent',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Accent Button</lib-button>`,\n  }),\n}"
                },
                {
                    "name": "CustomStyled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'primary',\n    class: 'text-lg px-6 py-3 bg-green-500 hover:bg-green-600',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [class]=\"class\">Custom Styled Button</lib-button>`,\n  }),\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'primary',\n    disabled: true,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Disabled Button</lib-button>`,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  title: 'Components/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['primary', 'accent', 'outline', 'text'],\n      description: 'Button style variant',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Disables the button',\n    },\n    class: {\n      control: 'text',\n      description: 'Additional Tailwind CSS classes for customization',\n    },\n  },\n}"
                },
                {
                    "name": "Outline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'outline',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Outline Button</lib-button>`,\n  }),\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'primary',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Primary Button</lib-button>`,\n  }),\n}"
                },
                {
                    "name": "Text",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'text',\n    disabled: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Text Button</lib-button>`,\n  }),\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts": [
                {
                    "name": "BasicSnackBar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    message: 'Disco party!',\r\n    type: 'info',\r\n    action: 'Dance',\r\n    duration: 5000,\r\n    position: 'bottom-center',\r\n  },\r\n}"
                },
                {
                    "name": "ConfigurablePosition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    message: 'Pool party!',\r\n    type: 'info',\r\n    duration: 5000,\r\n    position: 'bottom-right',\r\n  },\r\n}"
                },
                {
                    "name": "DismissibleError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    message: 'Something went wrong',\r\n    type: 'error',\r\n    dismissible: true,\r\n    duration: 0,\r\n    position: 'top-right',\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AlertComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Alert',\r\n  component: AlertComponent,\r\n  decorators: [\r\n    applicationConfig({\r\n      providers: [provideAnimations()],\r\n    }),\r\n  ],\r\n  args: {},\r\n  argTypes: {\r\n    message: { control: 'text' },\r\n    type: {\r\n      control: 'select',\r\n      options: ['success', 'warning', 'error', 'info'],\r\n    },\r\n    duration: { control: 'number' },\r\n    action: { control: 'text' },\r\n    dismissible: { control: 'boolean' },\r\n    position: {\r\n      control: 'select',\r\n      options: [\r\n        'top-left',\r\n        'top-center',\r\n        'top-right',\r\n        'bottom-left',\r\n        'bottom-center',\r\n        'bottom-right',\r\n      ],\r\n    },\r\n    icon: {\r\n      control: 'select',\r\n      options: [\r\n        '',\r\n        'pizza',\r\n        'mood',\r\n        'star',\r\n        'favorite',\r\n        'thumb_up',\r\n        'lightbulb',\r\n        'coffee',\r\n        'cloud',\r\n        'music_note',\r\n        'pets',\r\n        'rocket',\r\n        'beach_access',\r\n      ],\r\n    },\r\n    animation: { control: 'select', options: ['fade', 'slide'] },\r\n  },\r\n}"
                },
                {
                    "name": "StackedAlerts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<>",
                    "defaultValue": "{\r\n  render: (args: StackedAlertsArgs) => ({\r\n    props: args,\r\n    template: `\r\n      <lib-alert\r\n        [message]=\"firstMessage\"\r\n        [type]=\"firstType\"\r\n        [action]=\"firstAction\"\r\n        [dismissible]=\"firstDismissible\"\r\n        [icon]=\"firstIcon\"\r\n        [duration]=\"firstDuration\"\r\n        [animation]=\"firstAnimation\"\r\n        [position]=\"firstPosition\"\r\n        [bypassDuplicateCheck]=\"true\"\r\n      ></lib-alert>\r\n      <lib-alert\r\n        [message]=\"secondMessage\"\r\n        [type]=\"secondType\"\r\n        [action]=\"secondAction\"\r\n        [dismissible]=\"secondDismissible\"\r\n        [icon]=\"secondIcon\"\r\n        [duration]=\"secondDuration\"\r\n        [animation]=\"secondAnimation\"\r\n        [position]=\"secondPosition\"\r\n        [bypassDuplicateCheck]=\"true\"\r\n      ></lib-alert>\r\n      <lib-alert\r\n        [message]=\"thirdMessage\"\r\n        [type]=\"thirdType\"\r\n        [action]=\"thirdAction\"\r\n        [dismissible]=\"thirdDismissible\"\r\n        [icon]=\"thirdIcon\"\r\n        [duration]=\"thirdDuration\"\r\n        [animation]=\"thirdAnimation\"\r\n        [position]=\"thirdPosition\"\r\n        [bypassDuplicateCheck]=\"true\"\r\n      ></lib-alert>\r\n    `,\r\n  }),\r\n  args: {\r\n    firstMessage: 'First alert',\r\n    firstType: 'success',\r\n    firstAction: null,\r\n    firstDismissible: true,\r\n    firstIcon: 'star',\r\n    firstDuration: 50000,\r\n    firstAnimation: 'slide',\r\n    firstPosition: 'top-right',\r\n\r\n    secondMessage: 'Second alert',\r\n    secondType: 'warning',\r\n    secondAction: null,\r\n    secondDismissible: true,\r\n    secondIcon: null,\r\n    secondDuration: 50000,\r\n    secondAnimation: 'slide',\r\n    secondPosition: 'top-right',\r\n\r\n    thirdMessage: 'Third alert',\r\n    thirdType: 'error',\r\n    thirdAction: null,\r\n    thirdDismissible: true,\r\n    thirdIcon: null,\r\n    thirdDuration: 50000,\r\n    thirdAnimation: 'slide',\r\n    thirdPosition: 'top-right',\r\n  } as StackedAlertsArgs,\r\n  argTypes: {\r\n    // First Alert Controls\r\n    firstMessage: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'First Alert Message',\r\n    },\r\n    firstType: {\r\n      control: 'select',\r\n      options: ['success', 'error', 'warning', 'info'],\r\n      name: 'First Alert Type',\r\n    },\r\n    firstAction: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'First Alert Action',\r\n    },\r\n    firstDismissible: { control: 'boolean', name: 'First Alert Dismissible' },\r\n    firstIcon: {\r\n      control: 'select',\r\n      options: [\r\n        '',\r\n        'pizza',\r\n        'mood',\r\n        'star',\r\n        'favorite',\r\n        'thumb_up',\r\n        'lightbulb',\r\n        'coffee',\r\n        'cloud',\r\n        'music_note',\r\n        'pets',\r\n        'rocket',\r\n        'beach_access',\r\n      ],\r\n      name: 'First Alert Icon',\r\n    },\r\n    firstDuration: { control: 'number', name: 'First Alert Duration' },\r\n    firstAnimation: {\r\n      control: 'select',\r\n      options: ['fade', 'slide'],\r\n      name: 'First Alert Animation',\r\n    },\r\n    firstPosition: {\r\n      control: 'select',\r\n      options: [\r\n        'top-left',\r\n        'top-center',\r\n        'top-right',\r\n        'bottom-left',\r\n        'bottom-center',\r\n        'bottom-right',\r\n      ],\r\n      name: 'First Alert Position',\r\n    },\r\n\r\n    // Second Alert Controls\r\n    secondMessage: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'Second Alert Message',\r\n    },\r\n    secondType: {\r\n      control: 'select',\r\n      options: ['success', 'error', 'warning', 'info'],\r\n      name: 'Second Alert Type',\r\n    },\r\n    secondAction: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'Second Alert Action',\r\n    },\r\n    secondDismissible: { control: 'boolean', name: 'Second Alert Dismissible' },\r\n    secondIcon: {\r\n      control: 'select',\r\n      options: [\r\n        '',\r\n        'pizza',\r\n        'mood',\r\n        'star',\r\n        'favorite',\r\n        'thumb_up',\r\n        'lightbulb',\r\n        'coffee',\r\n        'cloud',\r\n        'music_note',\r\n        'pets',\r\n        'rocket',\r\n        'beach_access',\r\n      ],\r\n      name: 'Second Alert Icon',\r\n    },\r\n    secondDuration: { control: 'number', name: 'Second Alert Duration' },\r\n    secondAnimation: {\r\n      control: 'select',\r\n      options: ['fade', 'slide'],\r\n      name: 'Second Alert Animation',\r\n    },\r\n    secondPosition: {\r\n      control: 'select',\r\n      options: [\r\n        'top-left',\r\n        'top-center',\r\n        'top-right',\r\n        'bottom-left',\r\n        'bottom-center',\r\n        'bottom-right',\r\n      ],\r\n      name: 'Second Alert Position',\r\n    },\r\n\r\n    // Third Alert Controls\r\n    thirdMessage: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'Third Alert Message',\r\n    },\r\n    thirdType: {\r\n      control: 'select',\r\n      options: ['success', 'error', 'warning', 'info'],\r\n      name: 'Third Alert Type',\r\n    },\r\n    thirdAction: {\r\n      control: { type: 'text', disable: false },\r\n      name: 'Third Alert Action',\r\n    },\r\n    thirdDismissible: { control: 'boolean', name: 'Third Alert Dismissible' },\r\n    thirdIcon: {\r\n      control: 'select',\r\n      options: [\r\n        '',\r\n        'pizza',\r\n        'mood',\r\n        'star',\r\n        'favorite',\r\n        'thumb_up',\r\n        'lightbulb',\r\n        'coffee',\r\n        'cloud',\r\n        'music_note',\r\n        'pets',\r\n        'rocket',\r\n        'beach_access',\r\n      ],\r\n      name: 'Third Alert Icon',\r\n    },\r\n    thirdDuration: { control: 'number', name: 'Third Alert Duration' },\r\n    thirdAnimation: {\r\n      control: 'select',\r\n      options: ['fade', 'slide'],\r\n      name: 'Third Alert Animation',\r\n    },\r\n    thirdPosition: {\r\n      control: 'select',\r\n      options: [\r\n        'top-left',\r\n        'top-center',\r\n        'top-right',\r\n        'bottom-left',\r\n        'bottom-center',\r\n        'bottom-right',\r\n      ],\r\n      name: 'Third Alert Position',\r\n    },\r\n\r\n    // Remove inherited fields that are not used in this story\r\n    message: { table: { disable: true } },\r\n    type: { table: { disable: true } },\r\n    duration: { table: { disable: true } },\r\n    action: { table: { disable: true } },\r\n    dismissible: { table: { disable: true } },\r\n    position: { table: { disable: true } },\r\n    icon: { table: { disable: true } },\r\n    animation: { table: { disable: true } },\r\n  },\r\n}"
                },
                {
                    "name": "SuccessWithAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    message: 'Data saved successfully',\r\n    type: 'success',\r\n    action: 'Undo',\r\n    duration: 3000,\r\n    position: 'bottom-center',\r\n  },\r\n}"
                },
                {
                    "name": "WarningWithCustomIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    message: 'Custom icon alert',\r\n    type: 'warning',\r\n    icon: 'star',\r\n    dismissible: true,\r\n    duration: 5000,\r\n    position: 'top-center',\r\n  },\r\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts": [
                {
                    "name": "Colored",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    color: '#ef4444', // Tailwind red-500\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                },
                {
                    "name": "Determinate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    mode: 'determinate',\n    value: 50,\n  },\n}"
                },
                {
                    "name": "DeterminateProgress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    mode: 'determinate',\n    value: 75,\n    size: 50,\n    thickness: 5,\n    color: '#10b981', // Tailwind green-500\n  },\n}"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 60,\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<LoadingSpinnerComponent>",
                    "defaultValue": "{\n  title: 'Components/LoadingSpinnerComponent',\n  component: LoadingSpinnerComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    mode: {\n      control: 'select',\n      options: ['determinate', 'indeterminate'],\n      description: 'Loading state',\n    },\n    value: {\n      control: 'number',\n      description: 'Progress value (0-100) for determinate mode',\n    },\n    size: { control: 'number', description: 'Diameter in pixels' },\n    thickness: { control: 'number', description: 'Stroke width in pixels' },\n    color: {\n      control: 'color',\n      description: 'Spinner color (hex or Tailwind color)',\n    },\n  },\n}"
                },
                {
                    "name": "Thick",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    thickness: 6,\n  },\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/.storybook/main.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/.storybook/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorybookConfig",
                    "defaultValue": "{\n  stories: ['../**/*.@(mdx|stories.@(js|jsx|ts|tsx))'],\n  addons: ['@storybook/addon-essentials', '@storybook/addon-interactions'],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n  docs: {\n    autodocs: true,\n    defaultName: 'Docs',\n  },\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts": [
                {
                    "name": "CustomStyled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    progress: 60,\n    color: 'primary',\n    variant: 'determinate',\n    class: 'h-6 rounded-lg',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [color]=\"color\" [variant]=\"variant\" [class]=\"class\"></lib-progress-bar>`,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    progress: 25,\n    color: \"primary\",\n    variant: 'determinate',\n    bufferProgress: 0\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
                },
                {
                    "name": "GreenBuffer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    progress: 40,\n    bufferProgress: 5,\n    color: 'success',\n    variant: 'buffer',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [buffer]=\"buffer\" [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
                },
                {
                    "name": "GreenProgress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    progress: 70,\n    color: 'success',\n    variant: 'determinate',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [progress]=\"progress\" [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ProgressBarComponent>",
                    "defaultValue": "{\n  title: 'Components/Progress Bar',\n  component: ProgressBarComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    progress: {\n      control: { type: 'range', min: 0, max: 100, step: 1 },\n      description: 'Progress percentage (0 to 100)',\n    },\n    // buffer: {\n    //   control: { type: 'range', min: 0, max: 100, step: 1 },\n    //   description: 'Buffer progress percentage (used in buffer variant)',\n    // },\n    color: {\n      control: 'select',\n      options: ['primary', 'secondary', 'success', 'error'],\n      description: 'Color of the progress bar',\n    },\n    variant: {\n      control: 'select',\n      options: ['determinate', 'indeterminate', 'buffer', 'query'],\n      description: 'Progress bar type',\n    },\n    // class: {\n    //   control: 'text',\n    //   description: 'Additional Tailwind CSS classes for customization',\n    // },\n  },\n}"
                },
                {
                    "name": "RedIndeterminate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    color: 'error',\n    variant: 'indeterminate',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-progress-bar [color]=\"color\" [variant]=\"variant\"></lib-progress-bar>`,\n  }),\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/drawer/drawer.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/drawer/drawer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "RightMini",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/drawer/drawer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/drawer/drawer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<DrawerComponent>",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    handleToggle: () => {\r\n      args.open = !args.open;\r\n      args.openChange(args.open); // manually emit for Storybook\r\n    },\r\n  },\r\n  template: `\r\n    <lib-drawer [mode]=\"mode\" [position]=\"position\" [open]=\"open\" (openChange)=\"openChange($event)\">\r\n      <div drawerContent class=\"h-full p-4 bg-blue-100\">\r\n        <p class=\"font-semibold\">Drawer content ({{ mode }} | {{ position }})</p>\r\n      </div>\r\n      <div mainContent class=\"p-4\">\r\n        <p>Main content area</p>\r\n        <button\r\n          *ngIf=\"mode === 'temporary'\"\r\n          (click)=\"handleToggle()\"\r\n          class=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded\"\r\n        >\r\n          Toggle Drawer\r\n        </button>\r\n      </div>\r\n    </lib-drawer>\r\n  `,\r\n})"
                },
                {
                    "name": "Temporary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/drawer/drawer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'home',\n    size: 'md',\n    color: 'text-gray-500',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-icon [name]=\"name\" [size]=\"size\" [color]=\"color\"></lib-icon>`,\n  }),\n}"
                },
                {
                    "name": "LargeRedIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'favorite',\n    size: 'xl',\n    color: 'text-red-500',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-icon [name]=\"name\" [size]=\"size\" [color]=\"color\"></lib-icon>`,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<IconComponent>",
                    "defaultValue": "{\n  title: 'Components/Icon',\n  component: IconComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    name: { control: 'text', description: 'Icon name from Material Icons' },\n    size: { \n      control: 'radio', \n      options: ['sm', 'md', 'lg', 'xl'], \n      description: 'Size of the icon' \n    },\n    color: { control: 'text', description: 'Tailwind color classes' },\n  },\n}"
                },
                {
                    "name": "SmallBlueIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'star',\n    size: 'sm',\n    color: 'text-blue-500',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<lib-icon [name]=\"name\" [size]=\"size\" [color]=\"color\"></lib-icon>`,\n  }),\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/paginator/paginator.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/paginator/paginator.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<PaginatorComponent>",
                    "defaultValue": "{\r\n  args: {\r\n    length: 100,\r\n    pageSize: 10,\r\n    pageIndex: 0,\r\n  },\r\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/.storybook/preview.ts": [
                {
                    "name": "link",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "document.createElement('link')"
                },
                {
                    "name": "parameters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  actions: { argTypesRegex: '^on[A-Z].*' },\n  controls: {\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/,\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AlertComponent>",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<IconComponent>",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LoadingSpinnerComponent>",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ProgressBarComponent>",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "libs/ngx-tailwind-flex-ui/.storybook/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "link",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parameters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StackedAlertsArgs",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicSnackBar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ConfigurablePosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DismissibleError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StackedAlerts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SuccessWithAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WarningWithCustomIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Accent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomStyled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Outline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Text",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/drawer/drawer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/drawer/drawer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightMini",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/drawer/drawer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/drawer/drawer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Temporary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/drawer/drawer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DrawerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LargeRedIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SmallBlueIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/icon/icon.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Colored",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Determinate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeterminateProgress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Thick",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/loadingSpinner/loadingSpinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingSpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/paginator/paginator.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomStyled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GreenBuffer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GreenProgress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RedIndeterminate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            }
        ]
    }
}